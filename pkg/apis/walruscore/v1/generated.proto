// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.seal_io.walrus.pkg.apis.walruscore.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/seal-io/walrus/pkg/apis/walruscore/v1";

message BasicAuth {
  // Username for OCI registry.
  // +optional
  optional string username = 1;

  // Password for OCI registry.
  // +optional
  optional string password = 2;

  // SecretRef specifies the Secret containing authentication credentials for helm repository.
  // For HTTP/S basic auth the secret must contain 'username' and 'password' fields.
  // +optional
  optional LocalObjectReference secretRef = 3;
}

// Catalog is the schema for the catalogs API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:crd-gen:resource:scope="Namespaced",subResources=["status"]
message Catalog {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional CatalogSpec spec = 2;

  optional CatalogStatus status = 3;
}

// CatalogList holds the list of Catalog.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message CatalogList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Catalog items = 2;
}

// CatalogSpec defines the desired state of Catalog.
message CatalogSpec {
  // TemplateFormat of the catalog.
  // +k8s:validation:cel[0]:rule="oldSelf == self"
  // +k8s:validation:cel[0]:message="immutable field"
  // +required
  optional string templateFormat = 1;

  // Description of the catalog.
  // +optional
  optional string description = 2;

  // Filtering specifies the filtering rules for the catalog.
  // +optional
  optional Filtering filtering = 3;

  // VCSSource specifies the vcs source configure.
  // +optional
  optional VCSSource vcsSource = 4;

  // HelmRepositorySource specifies the helm repository configure.
  // +optional
  optional HelmRepositorySource helmRepositorySource = 5;

  // OCIRegistrySource specifies the OCI registry configure.
  // +optional
  optional OCIRegistrySource ociRegistrySource = 6;
}

// CatalogStatus defines the observed state of Catalog.
message CatalogStatus {
  // LastSyncTime record the last auto/manual sync catalog time.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastSyncTime = 1;

  // TemplateCount include template count.
  optional int64 templateCount = 2;

  // Conditions holds the conditions for the catalog.
  // +optional
  repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 3;
}

// Connector is the schema for the connectors API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:crd-gen:resource:scope="Namespaced",subResources=["status"]
message Connector {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ConnectorSpec spec = 2;

  optional ConnectorStatus status = 3;
}

// ConnectorList holds the list of Connector.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ConnectorList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Connector items = 2;
}

// ConnectorSpec defines the desired state of Connector.
message ConnectorSpec {
}

// ConnectorStatus defines the observed state of Connector.
message ConnectorStatus {
}

// Filtering specifies the filtering rules for the catalog's template.
message Filtering {
  // IncludeFilter specifies the regular expression for matching the include template name.
  // +optional
  optional string includeFilter = 1;

  // ExcludeFilter specifies the regular expression for matching the exclude template name.
  // +optional
  optional string excludeFilter = 2;
}

// HelmChart specifies the tgz format helm chart configure.
message HelmChart {
  // BasicAuth containing authentication credentials for helm chart.
  optional BasicAuth basicAuth = 1;

  // URL of download the template from chart tgz address, e.g. https://charts.bitnami.com/bitnami/phpbb-16.5.0.tgz.
  // +required
  optional string url = 2;
}

// HelmOCIChart specifies the OCI format helm chart configure.
message HelmOCIChart {
  // BasicAuth containing authentication credentials for oci chart.
  optional BasicAuth basicAuth = 1;

  // URL of download the template from oci image with ref, e.g. oci://registry-1.docker.io/bitnamicharts/mysql?ref=10.1.0.
  // +required
  optional string url = 2;
}

// HelmRepositorySource specifies the helm repository configure.
message HelmRepositorySource {
  // BasicAuth containing authentication credentials for helm repository.
  optional BasicAuth basicAuth = 1;

  // URL of the source address, a valid URL contains at least a protocol and host.
  // +required
  optional string url = 2;
}

message LocalObjectReference {
  // Name of the object.
  optional string name = 1;
}

// OCIRegistrySource specifies the OCI registry configure.
message OCIRegistrySource {
  // BasicAuth containing authentication credentials for OCI registry.
  optional BasicAuth basicAuth = 1;

  // Domain for OCI registry.
  // +optional
  optional string domain = 2;
}

// Resource is the schema for the resources API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:crd-gen:resource:scope="Namespaced",subResources=["status"]
message Resource {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ResourceSpec spec = 2;

  optional ResourceStatus status = 3;
}

// ResourceDefinition is the schema for the resource definitions API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:crd-gen:resource:scope="Namespaced",subResources=["status"]
message ResourceDefinition {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ResourceDefinitionSpec spec = 2;

  optional ResourceDefinitionStatus status = 3;
}

// ResourceDefinitionList holds the list of ResourceDefinition.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ResourceDefinitionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ResourceDefinition items = 2;
}

// ResourceDefinitionSpec defines the desired state of ResourceDefinition.
message ResourceDefinitionSpec {
}

// ResourceDefinitionStatus defines the observed state of ResourceDefinition.
message ResourceDefinitionStatus {
}

// ResourceList holds the list of Resource.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ResourceList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Resource items = 2;
}

// ResourceRun is the schema for the resource runs API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:crd-gen:resource:scope="Namespaced",subResources=["status"]
message ResourceRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ResourceDefinitionSpec spec = 2;

  optional ResourceDefinitionStatus status = 3;
}

// ResourceRunList holds the list of ResourceRun.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ResourceRunList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ResourceRun items = 2;
}

// ResourceRunSpec defines the desired state of ResourceRun.
message ResourceRunSpec {
}

// ResourceRunStatus defines the observed state of ResourceRun.
message ResourceRunStatus {
}

// ResourceSpec defines the desired state of Resource.
message ResourceSpec {
}

// ResourceStatus defines the observed state of Resource.
message ResourceStatus {
}

// Template is the schema for the templates API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:crd-gen:resource:scope="Namespaced",subResources=["status"]
message Template {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional TemplateSpec spec = 2;

  optional TemplateStatus status = 3;
}

// TemplateList holds the list of Template.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message TemplateList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Template items = 2;
}

// TemplateSpec defines the desired state of Template.
message TemplateSpec {
  // TemplateFormat of the content.
  // +required
  optional string templateFormat = 1;

  // Description of the template.
  // +optional
  optional string description = 2;

  // VCSRepository specifies the vcs repository configure.
  // +optional
  optional VCSRepository vcsRepository = 3;

  // HelmOCIChart specifies the OCI format helm chart configure.
  // +optional
  optional HelmOCIChart helmOCIChart = 4;

  // HelmChart specifies the tgz format helm chart configure.
  // +optional
  optional HelmChart helmChart = 5;
}

// TemplateStatus defines the observed state of Template.
message TemplateStatus {
  // The original name of the template, name generate from chart.yaml, terraform git repo name.
  optional string originalName = 1;

  // A URL to an SVG or PNG image to be used as an icon.
  optional string icon = 2;

  // Versions holds the versions for the template.
  repeated TemplateVersion versions = 3;

  // Conditions holds the conditions for the template.
  repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 4;
}

// TemplateVersion defines the version of Template.
message TemplateVersion {
  optional string version = 1;

  // URL of downloading the version.
  // host.
  // +required
  optional string url = 2;

  // Schema holds the schema for the template version.
  optional LocalObjectReference schemaRef = 3;

  // OriginalUISchema holds the original UI schema for the template version.
  optional LocalObjectReference originalUISchemaRef = 4;

  // UISchema holds the UI schema for the template version.
  optional LocalObjectReference uiSchemaRef = 5;
}

message TokenAuth {
  // Token for HTTP/S bear token.
  // +optional
  optional string token = 1;

  // SecretRef specifies the Secret containing authentication credentials.
  // For HTTP/S bear token the secret must contain 'token' field.
  // +optional
  optional LocalObjectReference secretRef = 2;
}

// VCSRepository specifies the vcs repository of the template.
message VCSRepository {
  optional TokenAuth tokenAuth = 1;

  // URL of download the template from vsc repository with ref and subpath, e.g. https://github.com/walrus-catalog/terraform-static-redis?ref=main.
  // +required
  optional string url = 2;
}

// VCSSource specifies the vcs source configure.
message VCSSource {
  // TokenAuth containing authentication credentials for vcs source.
  optional TokenAuth tokenAuth = 1;

  // +k8s:validation:enum=["github","gitlab","gitee"]
  // +required
  optional string platform = 2;

  // URL of the source address, a valid URL contains at least a protocol and host.
  // +required
  optional string url = 3;
}

