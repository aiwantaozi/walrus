// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
)

// NodeResultApplyConfiguration represents an declarative configuration of the NodeResult type for use
// with apply.
type NodeResultApplyConfiguration struct {
	Phase    *v1alpha1.NodePhase        `json:"phase,omitempty"`
	Message  *string                    `json:"message,omitempty"`
	Outputs  *OutputsApplyConfiguration `json:"outputs,omitempty"`
	Progress *v1alpha1.Progress         `json:"progress,omitempty"`
}

// NodeResultApplyConfiguration constructs an declarative configuration of the NodeResult type for use with
// apply.
func NodeResult() *NodeResultApplyConfiguration {
	return &NodeResultApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *NodeResultApplyConfiguration) WithPhase(value v1alpha1.NodePhase) *NodeResultApplyConfiguration {
	b.Phase = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *NodeResultApplyConfiguration) WithMessage(value string) *NodeResultApplyConfiguration {
	b.Message = &value
	return b
}

// WithOutputs sets the Outputs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Outputs field is set to the value of the last call.
func (b *NodeResultApplyConfiguration) WithOutputs(value *OutputsApplyConfiguration) *NodeResultApplyConfiguration {
	b.Outputs = value
	return b
}

// WithProgress sets the Progress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Progress field is set to the value of the last call.
func (b *NodeResultApplyConfiguration) WithProgress(value v1alpha1.Progress) *NodeResultApplyConfiguration {
	b.Progress = &value
	return b
}
