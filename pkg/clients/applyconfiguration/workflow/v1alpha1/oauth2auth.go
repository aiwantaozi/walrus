// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/core/v1"
)

// OAuth2AuthApplyConfiguration represents an declarative configuration of the OAuth2Auth type for use
// with apply.
type OAuth2AuthApplyConfiguration struct {
	ClientIDSecret     *v1.SecretKeySelectorApplyConfiguration `json:"clientIDSecret,omitempty"`
	ClientSecretSecret *v1.SecretKeySelectorApplyConfiguration `json:"clientSecretSecret,omitempty"`
	TokenURLSecret     *v1.SecretKeySelectorApplyConfiguration `json:"tokenURLSecret,omitempty"`
	Scopes             []string                                `json:"scopes,omitempty"`
	EndpointParams     []OAuth2EndpointParamApplyConfiguration `json:"endpointParams,omitempty"`
}

// OAuth2AuthApplyConfiguration constructs an declarative configuration of the OAuth2Auth type for use with
// apply.
func OAuth2Auth() *OAuth2AuthApplyConfiguration {
	return &OAuth2AuthApplyConfiguration{}
}

// WithClientIDSecret sets the ClientIDSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientIDSecret field is set to the value of the last call.
func (b *OAuth2AuthApplyConfiguration) WithClientIDSecret(value *v1.SecretKeySelectorApplyConfiguration) *OAuth2AuthApplyConfiguration {
	b.ClientIDSecret = value
	return b
}

// WithClientSecretSecret sets the ClientSecretSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientSecretSecret field is set to the value of the last call.
func (b *OAuth2AuthApplyConfiguration) WithClientSecretSecret(value *v1.SecretKeySelectorApplyConfiguration) *OAuth2AuthApplyConfiguration {
	b.ClientSecretSecret = value
	return b
}

// WithTokenURLSecret sets the TokenURLSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TokenURLSecret field is set to the value of the last call.
func (b *OAuth2AuthApplyConfiguration) WithTokenURLSecret(value *v1.SecretKeySelectorApplyConfiguration) *OAuth2AuthApplyConfiguration {
	b.TokenURLSecret = value
	return b
}

// WithScopes adds the given value to the Scopes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Scopes field.
func (b *OAuth2AuthApplyConfiguration) WithScopes(values ...string) *OAuth2AuthApplyConfiguration {
	for i := range values {
		b.Scopes = append(b.Scopes, values[i])
	}
	return b
}

// WithEndpointParams adds the given value to the EndpointParams field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EndpointParams field.
func (b *OAuth2AuthApplyConfiguration) WithEndpointParams(values ...*OAuth2EndpointParamApplyConfiguration) *OAuth2AuthApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithEndpointParams")
		}
		b.EndpointParams = append(b.EndpointParams, *values[i])
	}
	return b
}
