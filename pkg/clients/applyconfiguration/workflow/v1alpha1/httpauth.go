// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// HTTPAuthApplyConfiguration represents an declarative configuration of the HTTPAuth type for use
// with apply.
type HTTPAuthApplyConfiguration struct {
	ClientCert *ClientCertAuthApplyConfiguration `json:"clientCert,omitempty"`
	OAuth2     *OAuth2AuthApplyConfiguration     `json:"oauth2,omitempty"`
	BasicAuth  *BasicAuthApplyConfiguration      `json:"basicAuth,omitempty"`
}

// HTTPAuthApplyConfiguration constructs an declarative configuration of the HTTPAuth type for use with
// apply.
func HTTPAuth() *HTTPAuthApplyConfiguration {
	return &HTTPAuthApplyConfiguration{}
}

// WithClientCert sets the ClientCert field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientCert field is set to the value of the last call.
func (b *HTTPAuthApplyConfiguration) WithClientCert(value *ClientCertAuthApplyConfiguration) *HTTPAuthApplyConfiguration {
	b.ClientCert = value
	return b
}

// WithOAuth2 sets the OAuth2 field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OAuth2 field is set to the value of the last call.
func (b *HTTPAuthApplyConfiguration) WithOAuth2(value *OAuth2AuthApplyConfiguration) *HTTPAuthApplyConfiguration {
	b.OAuth2 = value
	return b
}

// WithBasicAuth sets the BasicAuth field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BasicAuth field is set to the value of the last call.
func (b *HTTPAuthApplyConfiguration) WithBasicAuth(value *BasicAuthApplyConfiguration) *HTTPAuthApplyConfiguration {
	b.BasicAuth = value
	return b
}
