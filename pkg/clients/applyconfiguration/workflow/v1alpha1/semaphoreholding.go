// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// SemaphoreHoldingApplyConfiguration represents an declarative configuration of the SemaphoreHolding type for use
// with apply.
type SemaphoreHoldingApplyConfiguration struct {
	Semaphore *string  `json:"semaphore,omitempty"`
	Holders   []string `json:"holders,omitempty"`
}

// SemaphoreHoldingApplyConfiguration constructs an declarative configuration of the SemaphoreHolding type for use with
// apply.
func SemaphoreHolding() *SemaphoreHoldingApplyConfiguration {
	return &SemaphoreHoldingApplyConfiguration{}
}

// WithSemaphore sets the Semaphore field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Semaphore field is set to the value of the last call.
func (b *SemaphoreHoldingApplyConfiguration) WithSemaphore(value string) *SemaphoreHoldingApplyConfiguration {
	b.Semaphore = &value
	return b
}

// WithHolders adds the given value to the Holders field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Holders field.
func (b *SemaphoreHoldingApplyConfiguration) WithHolders(values ...string) *SemaphoreHoldingApplyConfiguration {
	for i := range values {
		b.Holders = append(b.Holders, values[i])
	}
	return b
}
