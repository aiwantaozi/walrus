// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// ArtifactGCStatusApplyConfiguration represents an declarative configuration of the ArtifactGCStatus type for use
// with apply.
type ArtifactGCStatusApplyConfiguration struct {
	ArtifactResultsByNode map[string]ArtifactResultNodeStatusApplyConfiguration `json:"artifactResultsByNode,omitempty"`
}

// ArtifactGCStatusApplyConfiguration constructs an declarative configuration of the ArtifactGCStatus type for use with
// apply.
func ArtifactGCStatus() *ArtifactGCStatusApplyConfiguration {
	return &ArtifactGCStatusApplyConfiguration{}
}

// WithArtifactResultsByNode puts the entries into the ArtifactResultsByNode field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ArtifactResultsByNode field,
// overwriting an existing map entries in ArtifactResultsByNode field with the same key.
func (b *ArtifactGCStatusApplyConfiguration) WithArtifactResultsByNode(entries map[string]ArtifactResultNodeStatusApplyConfiguration) *ArtifactGCStatusApplyConfiguration {
	if b.ArtifactResultsByNode == nil && len(entries) > 0 {
		b.ArtifactResultsByNode = make(map[string]ArtifactResultNodeStatusApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.ArtifactResultsByNode[k] = v
	}
	return b
}
