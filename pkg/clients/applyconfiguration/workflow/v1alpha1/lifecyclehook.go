// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// LifecycleHookApplyConfiguration represents an declarative configuration of the LifecycleHook type for use
// with apply.
type LifecycleHookApplyConfiguration struct {
	Template    *string                        `json:"template,omitempty"`
	Arguments   *ArgumentsApplyConfiguration   `json:"arguments,omitempty"`
	TemplateRef *TemplateRefApplyConfiguration `json:"templateRef,omitempty"`
	Expression  *string                        `json:"expression,omitempty"`
}

// LifecycleHookApplyConfiguration constructs an declarative configuration of the LifecycleHook type for use with
// apply.
func LifecycleHook() *LifecycleHookApplyConfiguration {
	return &LifecycleHookApplyConfiguration{}
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *LifecycleHookApplyConfiguration) WithTemplate(value string) *LifecycleHookApplyConfiguration {
	b.Template = &value
	return b
}

// WithArguments sets the Arguments field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Arguments field is set to the value of the last call.
func (b *LifecycleHookApplyConfiguration) WithArguments(value *ArgumentsApplyConfiguration) *LifecycleHookApplyConfiguration {
	b.Arguments = value
	return b
}

// WithTemplateRef sets the TemplateRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TemplateRef field is set to the value of the last call.
func (b *LifecycleHookApplyConfiguration) WithTemplateRef(value *TemplateRefApplyConfiguration) *LifecycleHookApplyConfiguration {
	b.TemplateRef = value
	return b
}

// WithExpression sets the Expression field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Expression field is set to the value of the last call.
func (b *LifecycleHookApplyConfiguration) WithExpression(value string) *LifecycleHookApplyConfiguration {
	b.Expression = &value
	return b
}
