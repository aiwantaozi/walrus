// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// WorkflowMetadataApplyConfiguration represents an declarative configuration of the WorkflowMetadata type for use
// with apply.
type WorkflowMetadataApplyConfiguration struct {
	Labels      map[string]string                           `json:"labels,omitempty"`
	Annotations map[string]string                           `json:"annotations,omitempty"`
	LabelsFrom  map[string]LabelValueFromApplyConfiguration `json:"labelsFrom,omitempty"`
}

// WorkflowMetadataApplyConfiguration constructs an declarative configuration of the WorkflowMetadata type for use with
// apply.
func WorkflowMetadata() *WorkflowMetadataApplyConfiguration {
	return &WorkflowMetadataApplyConfiguration{}
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *WorkflowMetadataApplyConfiguration) WithLabels(entries map[string]string) *WorkflowMetadataApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *WorkflowMetadataApplyConfiguration) WithAnnotations(entries map[string]string) *WorkflowMetadataApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithLabelsFrom puts the entries into the LabelsFrom field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the LabelsFrom field,
// overwriting an existing map entries in LabelsFrom field with the same key.
func (b *WorkflowMetadataApplyConfiguration) WithLabelsFrom(entries map[string]LabelValueFromApplyConfiguration) *WorkflowMetadataApplyConfiguration {
	if b.LabelsFrom == nil && len(entries) > 0 {
		b.LabelsFrom = make(map[string]LabelValueFromApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.LabelsFrom[k] = v
	}
	return b
}
