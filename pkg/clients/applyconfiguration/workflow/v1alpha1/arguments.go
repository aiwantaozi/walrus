// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	workflowv1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
)

// ArgumentsApplyConfiguration represents an declarative configuration of the Arguments type for use
// with apply.
type ArgumentsApplyConfiguration struct {
	Parameters []ParameterApplyConfiguration `json:"parameters,omitempty"`
	Artifacts  *workflowv1alpha1.Artifacts   `json:"artifacts,omitempty"`
}

// ArgumentsApplyConfiguration constructs an declarative configuration of the Arguments type for use with
// apply.
func Arguments() *ArgumentsApplyConfiguration {
	return &ArgumentsApplyConfiguration{}
}

// WithParameters adds the given value to the Parameters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Parameters field.
func (b *ArgumentsApplyConfiguration) WithParameters(values ...*ParameterApplyConfiguration) *ArgumentsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithParameters")
		}
		b.Parameters = append(b.Parameters, *values[i])
	}
	return b
}

// WithArtifacts sets the Artifacts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Artifacts field is set to the value of the last call.
func (b *ArgumentsApplyConfiguration) WithArtifacts(value workflowv1alpha1.Artifacts) *ArgumentsApplyConfiguration {
	b.Artifacts = &value
	return b
}
