// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/core/v1"
)

// ContainerSetTemplateApplyConfiguration represents an declarative configuration of the ContainerSetTemplate type for use
// with apply.
type ContainerSetTemplateApplyConfiguration struct {
	Containers    []ContainerNodeApplyConfiguration            `json:"containers,omitempty"`
	VolumeMounts  []v1.VolumeMountApplyConfiguration           `json:"volumeMounts,omitempty"`
	RetryStrategy *ContainerSetRetryStrategyApplyConfiguration `json:"retryStrategy,omitempty"`
}

// ContainerSetTemplateApplyConfiguration constructs an declarative configuration of the ContainerSetTemplate type for use with
// apply.
func ContainerSetTemplate() *ContainerSetTemplateApplyConfiguration {
	return &ContainerSetTemplateApplyConfiguration{}
}

// WithContainers adds the given value to the Containers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Containers field.
func (b *ContainerSetTemplateApplyConfiguration) WithContainers(values ...*ContainerNodeApplyConfiguration) *ContainerSetTemplateApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithContainers")
		}
		b.Containers = append(b.Containers, *values[i])
	}
	return b
}

// WithVolumeMounts adds the given value to the VolumeMounts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VolumeMounts field.
func (b *ContainerSetTemplateApplyConfiguration) WithVolumeMounts(values ...*v1.VolumeMountApplyConfiguration) *ContainerSetTemplateApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVolumeMounts")
		}
		b.VolumeMounts = append(b.VolumeMounts, *values[i])
	}
	return b
}

// WithRetryStrategy sets the RetryStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RetryStrategy field is set to the value of the last call.
func (b *ContainerSetTemplateApplyConfiguration) WithRetryStrategy(value *ContainerSetRetryStrategyApplyConfiguration) *ContainerSetTemplateApplyConfiguration {
	b.RetryStrategy = value
	return b
}
