// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// MutexStatusApplyConfiguration represents an declarative configuration of the MutexStatus type for use
// with apply.
type MutexStatusApplyConfiguration struct {
	Holding []MutexHoldingApplyConfiguration `json:"holding,omitempty"`
	Waiting []MutexHoldingApplyConfiguration `json:"waiting,omitempty"`
}

// MutexStatusApplyConfiguration constructs an declarative configuration of the MutexStatus type for use with
// apply.
func MutexStatus() *MutexStatusApplyConfiguration {
	return &MutexStatusApplyConfiguration{}
}

// WithHolding adds the given value to the Holding field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Holding field.
func (b *MutexStatusApplyConfiguration) WithHolding(values ...*MutexHoldingApplyConfiguration) *MutexStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithHolding")
		}
		b.Holding = append(b.Holding, *values[i])
	}
	return b
}

// WithWaiting adds the given value to the Waiting field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Waiting field.
func (b *MutexStatusApplyConfiguration) WithWaiting(values ...*MutexHoldingApplyConfiguration) *MutexStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithWaiting")
		}
		b.Waiting = append(b.Waiting, *values[i])
	}
	return b
}
