// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// HTTPArtifactApplyConfiguration represents an declarative configuration of the HTTPArtifact type for use
// with apply.
type HTTPArtifactApplyConfiguration struct {
	URL     *string                     `json:"url,omitempty"`
	Headers []HeaderApplyConfiguration  `json:"headers,omitempty"`
	Auth    *HTTPAuthApplyConfiguration `json:"auth,omitempty"`
}

// HTTPArtifactApplyConfiguration constructs an declarative configuration of the HTTPArtifact type for use with
// apply.
func HTTPArtifact() *HTTPArtifactApplyConfiguration {
	return &HTTPArtifactApplyConfiguration{}
}

// WithURL sets the URL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the URL field is set to the value of the last call.
func (b *HTTPArtifactApplyConfiguration) WithURL(value string) *HTTPArtifactApplyConfiguration {
	b.URL = &value
	return b
}

// WithHeaders adds the given value to the Headers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Headers field.
func (b *HTTPArtifactApplyConfiguration) WithHeaders(values ...*HeaderApplyConfiguration) *HTTPArtifactApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithHeaders")
		}
		b.Headers = append(b.Headers, *values[i])
	}
	return b
}

// WithAuth sets the Auth field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Auth field is set to the value of the last call.
func (b *HTTPArtifactApplyConfiguration) WithAuth(value *HTTPAuthApplyConfiguration) *HTTPArtifactApplyConfiguration {
	b.Auth = value
	return b
}
