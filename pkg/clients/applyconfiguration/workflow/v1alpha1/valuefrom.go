// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	v1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/core/v1"
)

// ValueFromApplyConfiguration represents an declarative configuration of the ValueFrom type for use
// with apply.
type ValueFromApplyConfiguration struct {
	Path            *string                                    `json:"path,omitempty"`
	JSONPath        *string                                    `json:"jsonPath,omitempty"`
	JQFilter        *string                                    `json:"jqFilter,omitempty"`
	Event           *string                                    `json:"event,omitempty"`
	Parameter       *string                                    `json:"parameter,omitempty"`
	Supplied        *v1alpha1.SuppliedValueFrom                `json:"supplied,omitempty"`
	ConfigMapKeyRef *v1.ConfigMapKeySelectorApplyConfiguration `json:"configMapKeyRef,omitempty"`
	Default         *v1alpha1.AnyString                        `json:"default,omitempty"`
	Expression      *string                                    `json:"expression,omitempty"`
}

// ValueFromApplyConfiguration constructs an declarative configuration of the ValueFrom type for use with
// apply.
func ValueFrom() *ValueFromApplyConfiguration {
	return &ValueFromApplyConfiguration{}
}

// WithPath sets the Path field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Path field is set to the value of the last call.
func (b *ValueFromApplyConfiguration) WithPath(value string) *ValueFromApplyConfiguration {
	b.Path = &value
	return b
}

// WithJSONPath sets the JSONPath field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the JSONPath field is set to the value of the last call.
func (b *ValueFromApplyConfiguration) WithJSONPath(value string) *ValueFromApplyConfiguration {
	b.JSONPath = &value
	return b
}

// WithJQFilter sets the JQFilter field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the JQFilter field is set to the value of the last call.
func (b *ValueFromApplyConfiguration) WithJQFilter(value string) *ValueFromApplyConfiguration {
	b.JQFilter = &value
	return b
}

// WithEvent sets the Event field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Event field is set to the value of the last call.
func (b *ValueFromApplyConfiguration) WithEvent(value string) *ValueFromApplyConfiguration {
	b.Event = &value
	return b
}

// WithParameter sets the Parameter field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Parameter field is set to the value of the last call.
func (b *ValueFromApplyConfiguration) WithParameter(value string) *ValueFromApplyConfiguration {
	b.Parameter = &value
	return b
}

// WithSupplied sets the Supplied field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Supplied field is set to the value of the last call.
func (b *ValueFromApplyConfiguration) WithSupplied(value v1alpha1.SuppliedValueFrom) *ValueFromApplyConfiguration {
	b.Supplied = &value
	return b
}

// WithConfigMapKeyRef sets the ConfigMapKeyRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigMapKeyRef field is set to the value of the last call.
func (b *ValueFromApplyConfiguration) WithConfigMapKeyRef(value *v1.ConfigMapKeySelectorApplyConfiguration) *ValueFromApplyConfiguration {
	b.ConfigMapKeyRef = value
	return b
}

// WithDefault sets the Default field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Default field is set to the value of the last call.
func (b *ValueFromApplyConfiguration) WithDefault(value v1alpha1.AnyString) *ValueFromApplyConfiguration {
	b.Default = &value
	return b
}

// WithExpression sets the Expression field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Expression field is set to the value of the last call.
func (b *ValueFromApplyConfiguration) WithExpression(value string) *ValueFromApplyConfiguration {
	b.Expression = &value
	return b
}
