// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// ArtifactResultNodeStatusApplyConfiguration represents an declarative configuration of the ArtifactResultNodeStatus type for use
// with apply.
type ArtifactResultNodeStatusApplyConfiguration struct {
	ArtifactResults map[string]ArtifactResultApplyConfiguration `json:"artifactResults,omitempty"`
}

// ArtifactResultNodeStatusApplyConfiguration constructs an declarative configuration of the ArtifactResultNodeStatus type for use with
// apply.
func ArtifactResultNodeStatus() *ArtifactResultNodeStatusApplyConfiguration {
	return &ArtifactResultNodeStatusApplyConfiguration{}
}

// WithArtifactResults puts the entries into the ArtifactResults field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ArtifactResults field,
// overwriting an existing map entries in ArtifactResults field with the same key.
func (b *ArtifactResultNodeStatusApplyConfiguration) WithArtifactResults(entries map[string]ArtifactResultApplyConfiguration) *ArtifactResultNodeStatusApplyConfiguration {
	if b.ArtifactResults == nil && len(entries) > 0 {
		b.ArtifactResults = make(map[string]ArtifactResultApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.ArtifactResults[k] = v
	}
	return b
}
