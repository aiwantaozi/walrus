// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// NodeStatusApplyConfiguration represents an declarative configuration of the NodeStatus type for use
// with apply.
type NodeStatusApplyConfiguration struct {
	ID                    *string                                      `json:"id,omitempty"`
	Name                  *string                                      `json:"name,omitempty"`
	DisplayName           *string                                      `json:"displayName,omitempty"`
	Type                  *v1alpha1.NodeType                           `json:"type,omitempty"`
	TemplateName          *string                                      `json:"templateName,omitempty"`
	TemplateRef           *TemplateRefApplyConfiguration               `json:"templateRef,omitempty"`
	TemplateScope         *string                                      `json:"templateScope,omitempty"`
	Phase                 *v1alpha1.NodePhase                          `json:"phase,omitempty"`
	BoundaryID            *string                                      `json:"boundaryID,omitempty"`
	Message               *string                                      `json:"message,omitempty"`
	StartedAt             *v1.Time                                     `json:"startedAt,omitempty"`
	FinishedAt            *v1.Time                                     `json:"finishedAt,omitempty"`
	EstimatedDuration     *v1alpha1.EstimatedDuration                  `json:"estimatedDuration,omitempty"`
	Progress              *v1alpha1.Progress                           `json:"progress,omitempty"`
	ResourcesDuration     *v1alpha1.ResourcesDuration                  `json:"resourcesDuration,omitempty"`
	PodIP                 *string                                      `json:"podIP,omitempty"`
	Daemoned              *bool                                        `json:"daemoned,omitempty"`
	NodeFlag              *NodeFlagApplyConfiguration                  `json:"nodeFlag,omitempty"`
	Inputs                *InputsApplyConfiguration                    `json:"inputs,omitempty"`
	Outputs               *OutputsApplyConfiguration                   `json:"outputs,omitempty"`
	Children              []string                                     `json:"children,omitempty"`
	OutboundNodes         []string                                     `json:"outboundNodes,omitempty"`
	HostNodeName          *string                                      `json:"hostNodeName,omitempty"`
	MemoizationStatus     *MemoizationStatusApplyConfiguration         `json:"memoizationStatus,omitempty"`
	SynchronizationStatus *NodeSynchronizationStatusApplyConfiguration `json:"synchronizationStatus,omitempty"`
}

// NodeStatusApplyConfiguration constructs an declarative configuration of the NodeStatus type for use with
// apply.
func NodeStatus() *NodeStatusApplyConfiguration {
	return &NodeStatusApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithID(value string) *NodeStatusApplyConfiguration {
	b.ID = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithName(value string) *NodeStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithDisplayName sets the DisplayName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DisplayName field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithDisplayName(value string) *NodeStatusApplyConfiguration {
	b.DisplayName = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithType(value v1alpha1.NodeType) *NodeStatusApplyConfiguration {
	b.Type = &value
	return b
}

// WithTemplateName sets the TemplateName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TemplateName field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithTemplateName(value string) *NodeStatusApplyConfiguration {
	b.TemplateName = &value
	return b
}

// WithTemplateRef sets the TemplateRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TemplateRef field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithTemplateRef(value *TemplateRefApplyConfiguration) *NodeStatusApplyConfiguration {
	b.TemplateRef = value
	return b
}

// WithTemplateScope sets the TemplateScope field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TemplateScope field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithTemplateScope(value string) *NodeStatusApplyConfiguration {
	b.TemplateScope = &value
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithPhase(value v1alpha1.NodePhase) *NodeStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithBoundaryID sets the BoundaryID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BoundaryID field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithBoundaryID(value string) *NodeStatusApplyConfiguration {
	b.BoundaryID = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithMessage(value string) *NodeStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithStartedAt sets the StartedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartedAt field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithStartedAt(value v1.Time) *NodeStatusApplyConfiguration {
	b.StartedAt = &value
	return b
}

// WithFinishedAt sets the FinishedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FinishedAt field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithFinishedAt(value v1.Time) *NodeStatusApplyConfiguration {
	b.FinishedAt = &value
	return b
}

// WithEstimatedDuration sets the EstimatedDuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EstimatedDuration field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithEstimatedDuration(value v1alpha1.EstimatedDuration) *NodeStatusApplyConfiguration {
	b.EstimatedDuration = &value
	return b
}

// WithProgress sets the Progress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Progress field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithProgress(value v1alpha1.Progress) *NodeStatusApplyConfiguration {
	b.Progress = &value
	return b
}

// WithResourcesDuration sets the ResourcesDuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourcesDuration field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithResourcesDuration(value v1alpha1.ResourcesDuration) *NodeStatusApplyConfiguration {
	b.ResourcesDuration = &value
	return b
}

// WithPodIP sets the PodIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodIP field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithPodIP(value string) *NodeStatusApplyConfiguration {
	b.PodIP = &value
	return b
}

// WithDaemoned sets the Daemoned field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Daemoned field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithDaemoned(value bool) *NodeStatusApplyConfiguration {
	b.Daemoned = &value
	return b
}

// WithNodeFlag sets the NodeFlag field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeFlag field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithNodeFlag(value *NodeFlagApplyConfiguration) *NodeStatusApplyConfiguration {
	b.NodeFlag = value
	return b
}

// WithInputs sets the Inputs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Inputs field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithInputs(value *InputsApplyConfiguration) *NodeStatusApplyConfiguration {
	b.Inputs = value
	return b
}

// WithOutputs sets the Outputs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Outputs field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithOutputs(value *OutputsApplyConfiguration) *NodeStatusApplyConfiguration {
	b.Outputs = value
	return b
}

// WithChildren adds the given value to the Children field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Children field.
func (b *NodeStatusApplyConfiguration) WithChildren(values ...string) *NodeStatusApplyConfiguration {
	for i := range values {
		b.Children = append(b.Children, values[i])
	}
	return b
}

// WithOutboundNodes adds the given value to the OutboundNodes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OutboundNodes field.
func (b *NodeStatusApplyConfiguration) WithOutboundNodes(values ...string) *NodeStatusApplyConfiguration {
	for i := range values {
		b.OutboundNodes = append(b.OutboundNodes, values[i])
	}
	return b
}

// WithHostNodeName sets the HostNodeName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostNodeName field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithHostNodeName(value string) *NodeStatusApplyConfiguration {
	b.HostNodeName = &value
	return b
}

// WithMemoizationStatus sets the MemoizationStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MemoizationStatus field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithMemoizationStatus(value *MemoizationStatusApplyConfiguration) *NodeStatusApplyConfiguration {
	b.MemoizationStatus = value
	return b
}

// WithSynchronizationStatus sets the SynchronizationStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SynchronizationStatus field is set to the value of the last call.
func (b *NodeStatusApplyConfiguration) WithSynchronizationStatus(value *NodeSynchronizationStatusApplyConfiguration) *NodeStatusApplyConfiguration {
	b.SynchronizationStatus = value
	return b
}
