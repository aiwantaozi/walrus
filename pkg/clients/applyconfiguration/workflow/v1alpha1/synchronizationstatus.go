// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// SynchronizationStatusApplyConfiguration represents an declarative configuration of the SynchronizationStatus type for use
// with apply.
type SynchronizationStatusApplyConfiguration struct {
	Semaphore *SemaphoreStatusApplyConfiguration `json:"semaphore,omitempty"`
	Mutex     *MutexStatusApplyConfiguration     `json:"mutex,omitempty"`
}

// SynchronizationStatusApplyConfiguration constructs an declarative configuration of the SynchronizationStatus type for use with
// apply.
func SynchronizationStatus() *SynchronizationStatusApplyConfiguration {
	return &SynchronizationStatusApplyConfiguration{}
}

// WithSemaphore sets the Semaphore field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Semaphore field is set to the value of the last call.
func (b *SynchronizationStatusApplyConfiguration) WithSemaphore(value *SemaphoreStatusApplyConfiguration) *SynchronizationStatusApplyConfiguration {
	b.Semaphore = value
	return b
}

// WithMutex sets the Mutex field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mutex field is set to the value of the last call.
func (b *SynchronizationStatusApplyConfiguration) WithMutex(value *MutexStatusApplyConfiguration) *SynchronizationStatusApplyConfiguration {
	b.Mutex = value
	return b
}
