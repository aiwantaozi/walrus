// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// ArtifactNodeSpecApplyConfiguration represents an declarative configuration of the ArtifactNodeSpec type for use
// with apply.
type ArtifactNodeSpecApplyConfiguration struct {
	ArchiveLocation *ArtifactLocationApplyConfiguration   `json:"archiveLocation,omitempty"`
	Artifacts       map[string]ArtifactApplyConfiguration `json:"artifacts,omitempty"`
}

// ArtifactNodeSpecApplyConfiguration constructs an declarative configuration of the ArtifactNodeSpec type for use with
// apply.
func ArtifactNodeSpec() *ArtifactNodeSpecApplyConfiguration {
	return &ArtifactNodeSpecApplyConfiguration{}
}

// WithArchiveLocation sets the ArchiveLocation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ArchiveLocation field is set to the value of the last call.
func (b *ArtifactNodeSpecApplyConfiguration) WithArchiveLocation(value *ArtifactLocationApplyConfiguration) *ArtifactNodeSpecApplyConfiguration {
	b.ArchiveLocation = value
	return b
}

// WithArtifacts puts the entries into the Artifacts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Artifacts field,
// overwriting an existing map entries in Artifacts field with the same key.
func (b *ArtifactNodeSpecApplyConfiguration) WithArtifacts(entries map[string]ArtifactApplyConfiguration) *ArtifactNodeSpecApplyConfiguration {
	if b.Artifacts == nil && len(entries) > 0 {
		b.Artifacts = make(map[string]ArtifactApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Artifacts[k] = v
	}
	return b
}
