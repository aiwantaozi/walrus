// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	workflowv1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	v1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/core/v1"
	corev1 "k8s.io/api/core/v1"
	policyv1 "k8s.io/api/policy/v1"
)

// WorkflowSpecApplyConfiguration represents an declarative configuration of the WorkflowSpec type for use
// with apply.
type WorkflowSpecApplyConfiguration struct {
	Templates                    []TemplateApplyConfiguration                 `json:"templates,omitempty"`
	Entrypoint                   *string                                      `json:"entrypoint,omitempty"`
	Arguments                    *ArgumentsApplyConfiguration                 `json:"arguments,omitempty"`
	ServiceAccountName           *string                                      `json:"serviceAccountName,omitempty"`
	AutomountServiceAccountToken *bool                                        `json:"automountServiceAccountToken,omitempty"`
	Executor                     *ExecutorConfigApplyConfiguration            `json:"executor,omitempty"`
	Volumes                      []v1.VolumeApplyConfiguration                `json:"volumes,omitempty"`
	VolumeClaimTemplates         []v1.PersistentVolumeClaimApplyConfiguration `json:"volumeClaimTemplates,omitempty"`
	Parallelism                  *int64                                       `json:"parallelism,omitempty"`
	ArtifactRepositoryRef        *ArtifactRepositoryRefApplyConfiguration     `json:"artifactRepositoryRef,omitempty"`
	Suspend                      *bool                                        `json:"suspend,omitempty"`
	NodeSelector                 map[string]string                            `json:"nodeSelector,omitempty"`
	Affinity                     *v1.AffinityApplyConfiguration               `json:"affinity,omitempty"`
	Tolerations                  []v1.TolerationApplyConfiguration            `json:"tolerations,omitempty"`
	ImagePullSecrets             []v1.LocalObjectReferenceApplyConfiguration  `json:"imagePullSecrets,omitempty"`
	HostNetwork                  *bool                                        `json:"hostNetwork,omitempty"`
	DNSPolicy                    *corev1.DNSPolicy                            `json:"dnsPolicy,omitempty"`
	DNSConfig                    *v1.PodDNSConfigApplyConfiguration           `json:"dnsConfig,omitempty"`
	OnExit                       *string                                      `json:"onExit,omitempty"`
	TTLStrategy                  *TTLStrategyApplyConfiguration               `json:"ttlStrategy,omitempty"`
	ActiveDeadlineSeconds        *int64                                       `json:"activeDeadlineSeconds,omitempty"`
	Priority                     *int32                                       `json:"priority,omitempty"`
	SchedulerName                *string                                      `json:"schedulerName,omitempty"`
	PodGC                        *PodGCApplyConfiguration                     `json:"podGC,omitempty"`
	PodPriorityClassName         *string                                      `json:"podPriorityClassName,omitempty"`
	PodPriority                  *int32                                       `json:"podPriority,omitempty"`
	HostAliases                  []v1.HostAliasApplyConfiguration             `json:"hostAliases,omitempty"`
	SecurityContext              *v1.PodSecurityContextApplyConfiguration     `json:"securityContext,omitempty"`
	PodSpecPatch                 *string                                      `json:"podSpecPatch,omitempty"`
	PodDisruptionBudget          *policyv1.PodDisruptionBudgetSpec            `json:"podDisruptionBudget,omitempty"`
	Metrics                      *MetricsApplyConfiguration                   `json:"metrics,omitempty"`
	Shutdown                     *workflowv1alpha1.ShutdownStrategy           `json:"shutdown,omitempty"`
	WorkflowTemplateRef          *WorkflowTemplateRefApplyConfiguration       `json:"workflowTemplateRef,omitempty"`
	Synchronization              *SynchronizationApplyConfiguration           `json:"synchronization,omitempty"`
	VolumeClaimGC                *VolumeClaimGCApplyConfiguration             `json:"volumeClaimGC,omitempty"`
	RetryStrategy                *RetryStrategyApplyConfiguration             `json:"retryStrategy,omitempty"`
	PodMetadata                  *MetadataApplyConfiguration                  `json:"podMetadata,omitempty"`
	TemplateDefaults             *TemplateApplyConfiguration                  `json:"templateDefaults,omitempty"`
	ArchiveLogs                  *bool                                        `json:"archiveLogs,omitempty"`
	Hooks                        *workflowv1alpha1.LifecycleHooks             `json:"hooks,omitempty"`
	WorkflowMetadata             *WorkflowMetadataApplyConfiguration          `json:"workflowMetadata,omitempty"`
	ArtifactGC                   *WorkflowLevelArtifactGCApplyConfiguration   `json:"artifactGC,omitempty"`
}

// WorkflowSpecApplyConfiguration constructs an declarative configuration of the WorkflowSpec type for use with
// apply.
func WorkflowSpec() *WorkflowSpecApplyConfiguration {
	return &WorkflowSpecApplyConfiguration{}
}

// WithTemplates adds the given value to the Templates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Templates field.
func (b *WorkflowSpecApplyConfiguration) WithTemplates(values ...*TemplateApplyConfiguration) *WorkflowSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTemplates")
		}
		b.Templates = append(b.Templates, *values[i])
	}
	return b
}

// WithEntrypoint sets the Entrypoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Entrypoint field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithEntrypoint(value string) *WorkflowSpecApplyConfiguration {
	b.Entrypoint = &value
	return b
}

// WithArguments sets the Arguments field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Arguments field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithArguments(value *ArgumentsApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.Arguments = value
	return b
}

// WithServiceAccountName sets the ServiceAccountName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccountName field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithServiceAccountName(value string) *WorkflowSpecApplyConfiguration {
	b.ServiceAccountName = &value
	return b
}

// WithAutomountServiceAccountToken sets the AutomountServiceAccountToken field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AutomountServiceAccountToken field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithAutomountServiceAccountToken(value bool) *WorkflowSpecApplyConfiguration {
	b.AutomountServiceAccountToken = &value
	return b
}

// WithExecutor sets the Executor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Executor field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithExecutor(value *ExecutorConfigApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.Executor = value
	return b
}

// WithVolumes adds the given value to the Volumes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Volumes field.
func (b *WorkflowSpecApplyConfiguration) WithVolumes(values ...*v1.VolumeApplyConfiguration) *WorkflowSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVolumes")
		}
		b.Volumes = append(b.Volumes, *values[i])
	}
	return b
}

// WithVolumeClaimTemplates adds the given value to the VolumeClaimTemplates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VolumeClaimTemplates field.
func (b *WorkflowSpecApplyConfiguration) WithVolumeClaimTemplates(values ...*v1.PersistentVolumeClaimApplyConfiguration) *WorkflowSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVolumeClaimTemplates")
		}
		b.VolumeClaimTemplates = append(b.VolumeClaimTemplates, *values[i])
	}
	return b
}

// WithParallelism sets the Parallelism field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Parallelism field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithParallelism(value int64) *WorkflowSpecApplyConfiguration {
	b.Parallelism = &value
	return b
}

// WithArtifactRepositoryRef sets the ArtifactRepositoryRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ArtifactRepositoryRef field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithArtifactRepositoryRef(value *ArtifactRepositoryRefApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.ArtifactRepositoryRef = value
	return b
}

// WithSuspend sets the Suspend field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Suspend field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithSuspend(value bool) *WorkflowSpecApplyConfiguration {
	b.Suspend = &value
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *WorkflowSpecApplyConfiguration) WithNodeSelector(entries map[string]string) *WorkflowSpecApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithAffinity(value *v1.AffinityApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.Affinity = value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *WorkflowSpecApplyConfiguration) WithTolerations(values ...*v1.TolerationApplyConfiguration) *WorkflowSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTolerations")
		}
		b.Tolerations = append(b.Tolerations, *values[i])
	}
	return b
}

// WithImagePullSecrets adds the given value to the ImagePullSecrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImagePullSecrets field.
func (b *WorkflowSpecApplyConfiguration) WithImagePullSecrets(values ...*v1.LocalObjectReferenceApplyConfiguration) *WorkflowSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithImagePullSecrets")
		}
		b.ImagePullSecrets = append(b.ImagePullSecrets, *values[i])
	}
	return b
}

// WithHostNetwork sets the HostNetwork field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostNetwork field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithHostNetwork(value bool) *WorkflowSpecApplyConfiguration {
	b.HostNetwork = &value
	return b
}

// WithDNSPolicy sets the DNSPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DNSPolicy field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithDNSPolicy(value corev1.DNSPolicy) *WorkflowSpecApplyConfiguration {
	b.DNSPolicy = &value
	return b
}

// WithDNSConfig sets the DNSConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DNSConfig field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithDNSConfig(value *v1.PodDNSConfigApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.DNSConfig = value
	return b
}

// WithOnExit sets the OnExit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OnExit field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithOnExit(value string) *WorkflowSpecApplyConfiguration {
	b.OnExit = &value
	return b
}

// WithTTLStrategy sets the TTLStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TTLStrategy field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithTTLStrategy(value *TTLStrategyApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.TTLStrategy = value
	return b
}

// WithActiveDeadlineSeconds sets the ActiveDeadlineSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ActiveDeadlineSeconds field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithActiveDeadlineSeconds(value int64) *WorkflowSpecApplyConfiguration {
	b.ActiveDeadlineSeconds = &value
	return b
}

// WithPriority sets the Priority field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Priority field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithPriority(value int32) *WorkflowSpecApplyConfiguration {
	b.Priority = &value
	return b
}

// WithSchedulerName sets the SchedulerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SchedulerName field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithSchedulerName(value string) *WorkflowSpecApplyConfiguration {
	b.SchedulerName = &value
	return b
}

// WithPodGC sets the PodGC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodGC field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithPodGC(value *PodGCApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.PodGC = value
	return b
}

// WithPodPriorityClassName sets the PodPriorityClassName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodPriorityClassName field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithPodPriorityClassName(value string) *WorkflowSpecApplyConfiguration {
	b.PodPriorityClassName = &value
	return b
}

// WithPodPriority sets the PodPriority field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodPriority field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithPodPriority(value int32) *WorkflowSpecApplyConfiguration {
	b.PodPriority = &value
	return b
}

// WithHostAliases adds the given value to the HostAliases field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the HostAliases field.
func (b *WorkflowSpecApplyConfiguration) WithHostAliases(values ...*v1.HostAliasApplyConfiguration) *WorkflowSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithHostAliases")
		}
		b.HostAliases = append(b.HostAliases, *values[i])
	}
	return b
}

// WithSecurityContext sets the SecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecurityContext field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithSecurityContext(value *v1.PodSecurityContextApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.SecurityContext = value
	return b
}

// WithPodSpecPatch sets the PodSpecPatch field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodSpecPatch field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithPodSpecPatch(value string) *WorkflowSpecApplyConfiguration {
	b.PodSpecPatch = &value
	return b
}

// WithPodDisruptionBudget sets the PodDisruptionBudget field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodDisruptionBudget field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithPodDisruptionBudget(value policyv1.PodDisruptionBudgetSpec) *WorkflowSpecApplyConfiguration {
	b.PodDisruptionBudget = &value
	return b
}

// WithMetrics sets the Metrics field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Metrics field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithMetrics(value *MetricsApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.Metrics = value
	return b
}

// WithShutdown sets the Shutdown field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Shutdown field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithShutdown(value workflowv1alpha1.ShutdownStrategy) *WorkflowSpecApplyConfiguration {
	b.Shutdown = &value
	return b
}

// WithWorkflowTemplateRef sets the WorkflowTemplateRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkflowTemplateRef field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithWorkflowTemplateRef(value *WorkflowTemplateRefApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.WorkflowTemplateRef = value
	return b
}

// WithSynchronization sets the Synchronization field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Synchronization field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithSynchronization(value *SynchronizationApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.Synchronization = value
	return b
}

// WithVolumeClaimGC sets the VolumeClaimGC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VolumeClaimGC field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithVolumeClaimGC(value *VolumeClaimGCApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.VolumeClaimGC = value
	return b
}

// WithRetryStrategy sets the RetryStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RetryStrategy field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithRetryStrategy(value *RetryStrategyApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.RetryStrategy = value
	return b
}

// WithPodMetadata sets the PodMetadata field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodMetadata field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithPodMetadata(value *MetadataApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.PodMetadata = value
	return b
}

// WithTemplateDefaults sets the TemplateDefaults field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TemplateDefaults field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithTemplateDefaults(value *TemplateApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.TemplateDefaults = value
	return b
}

// WithArchiveLogs sets the ArchiveLogs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ArchiveLogs field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithArchiveLogs(value bool) *WorkflowSpecApplyConfiguration {
	b.ArchiveLogs = &value
	return b
}

// WithHooks sets the Hooks field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Hooks field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithHooks(value workflowv1alpha1.LifecycleHooks) *WorkflowSpecApplyConfiguration {
	b.Hooks = &value
	return b
}

// WithWorkflowMetadata sets the WorkflowMetadata field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkflowMetadata field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithWorkflowMetadata(value *WorkflowMetadataApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.WorkflowMetadata = value
	return b
}

// WithArtifactGC sets the ArtifactGC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ArtifactGC field is set to the value of the last call.
func (b *WorkflowSpecApplyConfiguration) WithArtifactGC(value *WorkflowLevelArtifactGCApplyConfiguration) *WorkflowSpecApplyConfiguration {
	b.ArtifactGC = value
	return b
}
