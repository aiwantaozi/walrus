// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// SemaphoreStatusApplyConfiguration represents an declarative configuration of the SemaphoreStatus type for use
// with apply.
type SemaphoreStatusApplyConfiguration struct {
	Holding []SemaphoreHoldingApplyConfiguration `json:"holding,omitempty"`
	Waiting []SemaphoreHoldingApplyConfiguration `json:"waiting,omitempty"`
}

// SemaphoreStatusApplyConfiguration constructs an declarative configuration of the SemaphoreStatus type for use with
// apply.
func SemaphoreStatus() *SemaphoreStatusApplyConfiguration {
	return &SemaphoreStatusApplyConfiguration{}
}

// WithHolding adds the given value to the Holding field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Holding field.
func (b *SemaphoreStatusApplyConfiguration) WithHolding(values ...*SemaphoreHoldingApplyConfiguration) *SemaphoreStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithHolding")
		}
		b.Holding = append(b.Holding, *values[i])
	}
	return b
}

// WithWaiting adds the given value to the Waiting field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Waiting field.
func (b *SemaphoreStatusApplyConfiguration) WithWaiting(values ...*SemaphoreHoldingApplyConfiguration) *SemaphoreStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithWaiting")
		}
		b.Waiting = append(b.Waiting, *values[i])
	}
	return b
}
