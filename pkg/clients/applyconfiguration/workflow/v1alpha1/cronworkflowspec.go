// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	workflowv1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// CronWorkflowSpecApplyConfiguration represents an declarative configuration of the CronWorkflowSpec type for use
// with apply.
type CronWorkflowSpecApplyConfiguration struct {
	WorkflowSpec               *WorkflowSpecApplyConfiguration     `json:"workflowSpec,omitempty"`
	Schedule                   *string                             `json:"schedule,omitempty"`
	ConcurrencyPolicy          *workflowv1alpha1.ConcurrencyPolicy `json:"concurrencyPolicy,omitempty"`
	Suspend                    *bool                               `json:"suspend,omitempty"`
	StartingDeadlineSeconds    *int64                              `json:"startingDeadlineSeconds,omitempty"`
	SuccessfulJobsHistoryLimit *int32                              `json:"successfulJobsHistoryLimit,omitempty"`
	FailedJobsHistoryLimit     *int32                              `json:"failedJobsHistoryLimit,omitempty"`
	Timezone                   *string                             `json:"timezone,omitempty"`
	WorkflowMetadata           *v1.ObjectMetaApplyConfiguration    `json:"workflowMetadata,omitempty"`
}

// CronWorkflowSpecApplyConfiguration constructs an declarative configuration of the CronWorkflowSpec type for use with
// apply.
func CronWorkflowSpec() *CronWorkflowSpecApplyConfiguration {
	return &CronWorkflowSpecApplyConfiguration{}
}

// WithWorkflowSpec sets the WorkflowSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkflowSpec field is set to the value of the last call.
func (b *CronWorkflowSpecApplyConfiguration) WithWorkflowSpec(value *WorkflowSpecApplyConfiguration) *CronWorkflowSpecApplyConfiguration {
	b.WorkflowSpec = value
	return b
}

// WithSchedule sets the Schedule field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Schedule field is set to the value of the last call.
func (b *CronWorkflowSpecApplyConfiguration) WithSchedule(value string) *CronWorkflowSpecApplyConfiguration {
	b.Schedule = &value
	return b
}

// WithConcurrencyPolicy sets the ConcurrencyPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConcurrencyPolicy field is set to the value of the last call.
func (b *CronWorkflowSpecApplyConfiguration) WithConcurrencyPolicy(value workflowv1alpha1.ConcurrencyPolicy) *CronWorkflowSpecApplyConfiguration {
	b.ConcurrencyPolicy = &value
	return b
}

// WithSuspend sets the Suspend field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Suspend field is set to the value of the last call.
func (b *CronWorkflowSpecApplyConfiguration) WithSuspend(value bool) *CronWorkflowSpecApplyConfiguration {
	b.Suspend = &value
	return b
}

// WithStartingDeadlineSeconds sets the StartingDeadlineSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartingDeadlineSeconds field is set to the value of the last call.
func (b *CronWorkflowSpecApplyConfiguration) WithStartingDeadlineSeconds(value int64) *CronWorkflowSpecApplyConfiguration {
	b.StartingDeadlineSeconds = &value
	return b
}

// WithSuccessfulJobsHistoryLimit sets the SuccessfulJobsHistoryLimit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SuccessfulJobsHistoryLimit field is set to the value of the last call.
func (b *CronWorkflowSpecApplyConfiguration) WithSuccessfulJobsHistoryLimit(value int32) *CronWorkflowSpecApplyConfiguration {
	b.SuccessfulJobsHistoryLimit = &value
	return b
}

// WithFailedJobsHistoryLimit sets the FailedJobsHistoryLimit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailedJobsHistoryLimit field is set to the value of the last call.
func (b *CronWorkflowSpecApplyConfiguration) WithFailedJobsHistoryLimit(value int32) *CronWorkflowSpecApplyConfiguration {
	b.FailedJobsHistoryLimit = &value
	return b
}

// WithTimezone sets the Timezone field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timezone field is set to the value of the last call.
func (b *CronWorkflowSpecApplyConfiguration) WithTimezone(value string) *CronWorkflowSpecApplyConfiguration {
	b.Timezone = &value
	return b
}

// WithWorkflowMetadata sets the WorkflowMetadata field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkflowMetadata field is set to the value of the last call.
func (b *CronWorkflowSpecApplyConfiguration) WithWorkflowMetadata(value *v1.ObjectMetaApplyConfiguration) *CronWorkflowSpecApplyConfiguration {
	b.WorkflowMetadata = value
	return b
}
