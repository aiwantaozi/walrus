// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// DAGTemplateApplyConfiguration represents an declarative configuration of the DAGTemplate type for use
// with apply.
type DAGTemplateApplyConfiguration struct {
	Target   *string                     `json:"target,omitempty"`
	Tasks    []DAGTaskApplyConfiguration `json:"tasks,omitempty"`
	FailFast *bool                       `json:"failFast,omitempty"`
}

// DAGTemplateApplyConfiguration constructs an declarative configuration of the DAGTemplate type for use with
// apply.
func DAGTemplate() *DAGTemplateApplyConfiguration {
	return &DAGTemplateApplyConfiguration{}
}

// WithTarget sets the Target field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Target field is set to the value of the last call.
func (b *DAGTemplateApplyConfiguration) WithTarget(value string) *DAGTemplateApplyConfiguration {
	b.Target = &value
	return b
}

// WithTasks adds the given value to the Tasks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tasks field.
func (b *DAGTemplateApplyConfiguration) WithTasks(values ...*DAGTaskApplyConfiguration) *DAGTemplateApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTasks")
		}
		b.Tasks = append(b.Tasks, *values[i])
	}
	return b
}

// WithFailFast sets the FailFast field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailFast field is set to the value of the last call.
func (b *DAGTemplateApplyConfiguration) WithFailFast(value bool) *DAGTemplateApplyConfiguration {
	b.FailFast = &value
	return b
}
