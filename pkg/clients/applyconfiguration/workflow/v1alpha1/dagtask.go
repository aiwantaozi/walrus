// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	workflowv1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
)

// DAGTaskApplyConfiguration represents an declarative configuration of the DAGTask type for use
// with apply.
type DAGTaskApplyConfiguration struct {
	Name         *string                          `json:"name,omitempty"`
	Template     *string                          `json:"template,omitempty"`
	Inline       *TemplateApplyConfiguration      `json:"inline,omitempty"`
	Arguments    *ArgumentsApplyConfiguration     `json:"arguments,omitempty"`
	TemplateRef  *TemplateRefApplyConfiguration   `json:"templateRef,omitempty"`
	Dependencies []string                         `json:"dependencies,omitempty"`
	WithItems    []workflowv1alpha1.Item          `json:"withItems,omitempty"`
	WithParam    *string                          `json:"withParam,omitempty"`
	WithSequence *SequenceApplyConfiguration      `json:"withSequence,omitempty"`
	When         *string                          `json:"when,omitempty"`
	ContinueOn   *ContinueOnApplyConfiguration    `json:"continueOn,omitempty"`
	OnExit       *string                          `json:"onExit,omitempty"`
	Depends      *string                          `json:"depends,omitempty"`
	Hooks        *workflowv1alpha1.LifecycleHooks `json:"hooks,omitempty"`
}

// DAGTaskApplyConfiguration constructs an declarative configuration of the DAGTask type for use with
// apply.
func DAGTask() *DAGTaskApplyConfiguration {
	return &DAGTaskApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *DAGTaskApplyConfiguration) WithName(value string) *DAGTaskApplyConfiguration {
	b.Name = &value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *DAGTaskApplyConfiguration) WithTemplate(value string) *DAGTaskApplyConfiguration {
	b.Template = &value
	return b
}

// WithInline sets the Inline field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Inline field is set to the value of the last call.
func (b *DAGTaskApplyConfiguration) WithInline(value *TemplateApplyConfiguration) *DAGTaskApplyConfiguration {
	b.Inline = value
	return b
}

// WithArguments sets the Arguments field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Arguments field is set to the value of the last call.
func (b *DAGTaskApplyConfiguration) WithArguments(value *ArgumentsApplyConfiguration) *DAGTaskApplyConfiguration {
	b.Arguments = value
	return b
}

// WithTemplateRef sets the TemplateRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TemplateRef field is set to the value of the last call.
func (b *DAGTaskApplyConfiguration) WithTemplateRef(value *TemplateRefApplyConfiguration) *DAGTaskApplyConfiguration {
	b.TemplateRef = value
	return b
}

// WithDependencies adds the given value to the Dependencies field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Dependencies field.
func (b *DAGTaskApplyConfiguration) WithDependencies(values ...string) *DAGTaskApplyConfiguration {
	for i := range values {
		b.Dependencies = append(b.Dependencies, values[i])
	}
	return b
}

// WithWithItems adds the given value to the WithItems field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the WithItems field.
func (b *DAGTaskApplyConfiguration) WithWithItems(values ...workflowv1alpha1.Item) *DAGTaskApplyConfiguration {
	for i := range values {
		b.WithItems = append(b.WithItems, values[i])
	}
	return b
}

// WithWithParam sets the WithParam field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WithParam field is set to the value of the last call.
func (b *DAGTaskApplyConfiguration) WithWithParam(value string) *DAGTaskApplyConfiguration {
	b.WithParam = &value
	return b
}

// WithWithSequence sets the WithSequence field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WithSequence field is set to the value of the last call.
func (b *DAGTaskApplyConfiguration) WithWithSequence(value *SequenceApplyConfiguration) *DAGTaskApplyConfiguration {
	b.WithSequence = value
	return b
}

// WithWhen sets the When field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the When field is set to the value of the last call.
func (b *DAGTaskApplyConfiguration) WithWhen(value string) *DAGTaskApplyConfiguration {
	b.When = &value
	return b
}

// WithContinueOn sets the ContinueOn field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ContinueOn field is set to the value of the last call.
func (b *DAGTaskApplyConfiguration) WithContinueOn(value *ContinueOnApplyConfiguration) *DAGTaskApplyConfiguration {
	b.ContinueOn = value
	return b
}

// WithOnExit sets the OnExit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OnExit field is set to the value of the last call.
func (b *DAGTaskApplyConfiguration) WithOnExit(value string) *DAGTaskApplyConfiguration {
	b.OnExit = &value
	return b
}

// WithDepends sets the Depends field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Depends field is set to the value of the last call.
func (b *DAGTaskApplyConfiguration) WithDepends(value string) *DAGTaskApplyConfiguration {
	b.Depends = &value
	return b
}

// WithHooks sets the Hooks field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Hooks field is set to the value of the last call.
func (b *DAGTaskApplyConfiguration) WithHooks(value workflowv1alpha1.LifecycleHooks) *DAGTaskApplyConfiguration {
	b.Hooks = &value
	return b
}
