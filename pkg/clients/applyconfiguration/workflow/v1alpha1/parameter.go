// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
)

// ParameterApplyConfiguration represents an declarative configuration of the Parameter type for use
// with apply.
type ParameterApplyConfiguration struct {
	Name        *string                      `json:"name,omitempty"`
	Default     *v1alpha1.AnyString          `json:"default,omitempty"`
	Value       *v1alpha1.AnyString          `json:"value,omitempty"`
	ValueFrom   *ValueFromApplyConfiguration `json:"valueFrom,omitempty"`
	GlobalName  *string                      `json:"globalName,omitempty"`
	Enum        []v1alpha1.AnyString         `json:"enum,omitempty"`
	Description *v1alpha1.AnyString          `json:"description,omitempty"`
}

// ParameterApplyConfiguration constructs an declarative configuration of the Parameter type for use with
// apply.
func Parameter() *ParameterApplyConfiguration {
	return &ParameterApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ParameterApplyConfiguration) WithName(value string) *ParameterApplyConfiguration {
	b.Name = &value
	return b
}

// WithDefault sets the Default field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Default field is set to the value of the last call.
func (b *ParameterApplyConfiguration) WithDefault(value v1alpha1.AnyString) *ParameterApplyConfiguration {
	b.Default = &value
	return b
}

// WithValue sets the Value field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Value field is set to the value of the last call.
func (b *ParameterApplyConfiguration) WithValue(value v1alpha1.AnyString) *ParameterApplyConfiguration {
	b.Value = &value
	return b
}

// WithValueFrom sets the ValueFrom field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ValueFrom field is set to the value of the last call.
func (b *ParameterApplyConfiguration) WithValueFrom(value *ValueFromApplyConfiguration) *ParameterApplyConfiguration {
	b.ValueFrom = value
	return b
}

// WithGlobalName sets the GlobalName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GlobalName field is set to the value of the last call.
func (b *ParameterApplyConfiguration) WithGlobalName(value string) *ParameterApplyConfiguration {
	b.GlobalName = &value
	return b
}

// WithEnum adds the given value to the Enum field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Enum field.
func (b *ParameterApplyConfiguration) WithEnum(values ...v1alpha1.AnyString) *ParameterApplyConfiguration {
	for i := range values {
		b.Enum = append(b.Enum, values[i])
	}
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *ParameterApplyConfiguration) WithDescription(value v1alpha1.AnyString) *ParameterApplyConfiguration {
	b.Description = &value
	return b
}
