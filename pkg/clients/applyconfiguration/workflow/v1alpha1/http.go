// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
)

// HTTPApplyConfiguration represents an declarative configuration of the HTTP type for use
// with apply.
type HTTPApplyConfiguration struct {
	Method             *string                           `json:"method,omitempty"`
	URL                *string                           `json:"url,omitempty"`
	Headers            *v1alpha1.HTTPHeaders             `json:"headers,omitempty"`
	TimeoutSeconds     *int64                            `json:"timeoutSeconds,omitempty"`
	SuccessCondition   *string                           `json:"successCondition,omitempty"`
	Body               *string                           `json:"body,omitempty"`
	BodyFrom           *HTTPBodySourceApplyConfiguration `json:"bodyFrom,omitempty"`
	InsecureSkipVerify *bool                             `json:"insecureSkipVerify,omitempty"`
}

// HTTPApplyConfiguration constructs an declarative configuration of the HTTP type for use with
// apply.
func HTTP() *HTTPApplyConfiguration {
	return &HTTPApplyConfiguration{}
}

// WithMethod sets the Method field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Method field is set to the value of the last call.
func (b *HTTPApplyConfiguration) WithMethod(value string) *HTTPApplyConfiguration {
	b.Method = &value
	return b
}

// WithURL sets the URL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the URL field is set to the value of the last call.
func (b *HTTPApplyConfiguration) WithURL(value string) *HTTPApplyConfiguration {
	b.URL = &value
	return b
}

// WithHeaders sets the Headers field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Headers field is set to the value of the last call.
func (b *HTTPApplyConfiguration) WithHeaders(value v1alpha1.HTTPHeaders) *HTTPApplyConfiguration {
	b.Headers = &value
	return b
}

// WithTimeoutSeconds sets the TimeoutSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TimeoutSeconds field is set to the value of the last call.
func (b *HTTPApplyConfiguration) WithTimeoutSeconds(value int64) *HTTPApplyConfiguration {
	b.TimeoutSeconds = &value
	return b
}

// WithSuccessCondition sets the SuccessCondition field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SuccessCondition field is set to the value of the last call.
func (b *HTTPApplyConfiguration) WithSuccessCondition(value string) *HTTPApplyConfiguration {
	b.SuccessCondition = &value
	return b
}

// WithBody sets the Body field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Body field is set to the value of the last call.
func (b *HTTPApplyConfiguration) WithBody(value string) *HTTPApplyConfiguration {
	b.Body = &value
	return b
}

// WithBodyFrom sets the BodyFrom field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BodyFrom field is set to the value of the last call.
func (b *HTTPApplyConfiguration) WithBodyFrom(value *HTTPBodySourceApplyConfiguration) *HTTPApplyConfiguration {
	b.BodyFrom = value
	return b
}

// WithInsecureSkipVerify sets the InsecureSkipVerify field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InsecureSkipVerify field is set to the value of the last call.
func (b *HTTPApplyConfiguration) WithInsecureSkipVerify(value bool) *HTTPApplyConfiguration {
	b.InsecureSkipVerify = &value
	return b
}
