// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// ResourceTemplateApplyConfiguration represents an declarative configuration of the ResourceTemplate type for use
// with apply.
type ResourceTemplateApplyConfiguration struct {
	Action            *string                         `json:"action,omitempty"`
	MergeStrategy     *string                         `json:"mergeStrategy,omitempty"`
	Manifest          *string                         `json:"manifest,omitempty"`
	ManifestFrom      *ManifestFromApplyConfiguration `json:"manifestFrom,omitempty"`
	SetOwnerReference *bool                           `json:"setOwnerReference,omitempty"`
	SuccessCondition  *string                         `json:"successCondition,omitempty"`
	FailureCondition  *string                         `json:"failureCondition,omitempty"`
	Flags             []string                        `json:"flags,omitempty"`
}

// ResourceTemplateApplyConfiguration constructs an declarative configuration of the ResourceTemplate type for use with
// apply.
func ResourceTemplate() *ResourceTemplateApplyConfiguration {
	return &ResourceTemplateApplyConfiguration{}
}

// WithAction sets the Action field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Action field is set to the value of the last call.
func (b *ResourceTemplateApplyConfiguration) WithAction(value string) *ResourceTemplateApplyConfiguration {
	b.Action = &value
	return b
}

// WithMergeStrategy sets the MergeStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MergeStrategy field is set to the value of the last call.
func (b *ResourceTemplateApplyConfiguration) WithMergeStrategy(value string) *ResourceTemplateApplyConfiguration {
	b.MergeStrategy = &value
	return b
}

// WithManifest sets the Manifest field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Manifest field is set to the value of the last call.
func (b *ResourceTemplateApplyConfiguration) WithManifest(value string) *ResourceTemplateApplyConfiguration {
	b.Manifest = &value
	return b
}

// WithManifestFrom sets the ManifestFrom field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ManifestFrom field is set to the value of the last call.
func (b *ResourceTemplateApplyConfiguration) WithManifestFrom(value *ManifestFromApplyConfiguration) *ResourceTemplateApplyConfiguration {
	b.ManifestFrom = value
	return b
}

// WithSetOwnerReference sets the SetOwnerReference field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SetOwnerReference field is set to the value of the last call.
func (b *ResourceTemplateApplyConfiguration) WithSetOwnerReference(value bool) *ResourceTemplateApplyConfiguration {
	b.SetOwnerReference = &value
	return b
}

// WithSuccessCondition sets the SuccessCondition field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SuccessCondition field is set to the value of the last call.
func (b *ResourceTemplateApplyConfiguration) WithSuccessCondition(value string) *ResourceTemplateApplyConfiguration {
	b.SuccessCondition = &value
	return b
}

// WithFailureCondition sets the FailureCondition field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailureCondition field is set to the value of the last call.
func (b *ResourceTemplateApplyConfiguration) WithFailureCondition(value string) *ResourceTemplateApplyConfiguration {
	b.FailureCondition = &value
	return b
}

// WithFlags adds the given value to the Flags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Flags field.
func (b *ResourceTemplateApplyConfiguration) WithFlags(values ...string) *ResourceTemplateApplyConfiguration {
	for i := range values {
		b.Flags = append(b.Flags, values[i])
	}
	return b
}
