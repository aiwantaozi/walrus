// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/core/v1"
)

// SemaphoreRefApplyConfiguration represents an declarative configuration of the SemaphoreRef type for use
// with apply.
type SemaphoreRefApplyConfiguration struct {
	ConfigMapKeyRef *v1.ConfigMapKeySelectorApplyConfiguration `json:"configMapKeyRef,omitempty"`
	Namespace       *string                                    `json:"namespace,omitempty"`
}

// SemaphoreRefApplyConfiguration constructs an declarative configuration of the SemaphoreRef type for use with
// apply.
func SemaphoreRef() *SemaphoreRefApplyConfiguration {
	return &SemaphoreRefApplyConfiguration{}
}

// WithConfigMapKeyRef sets the ConfigMapKeyRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigMapKeyRef field is set to the value of the last call.
func (b *SemaphoreRefApplyConfiguration) WithConfigMapKeyRef(value *v1.ConfigMapKeySelectorApplyConfiguration) *SemaphoreRefApplyConfiguration {
	b.ConfigMapKeyRef = value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *SemaphoreRefApplyConfiguration) WithNamespace(value string) *SemaphoreRefApplyConfiguration {
	b.Namespace = &value
	return b
}
