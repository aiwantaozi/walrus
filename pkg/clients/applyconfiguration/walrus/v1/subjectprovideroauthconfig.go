// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

// SubjectProviderOAuthConfigApplyConfiguration represents an declarative configuration of the SubjectProviderOAuthConfig type for use
// with apply.
type SubjectProviderOAuthConfigApplyConfiguration struct {
	AuthorizationEndpoint *string                                             `json:"authorizationEndpoint,omitempty"`
	TokenEndpoint         *string                                             `json:"tokenEndpoint,omitempty"`
	UserinfoEndpoint      *string                                             `json:"userinfoEndpoint,omitempty"`
	SkipInsecureVerify    *bool                                               `json:"skipInsecureVerify,omitempty"`
	ClientID              *string                                             `json:"clientID,omitempty"`
	ClientSecret          *string                                             `json:"clientSecret,omitempty"`
	ClaimMapping          *SubjectProviderOAuthClaimMappingApplyConfiguration `json:"claimMapping,omitempty"`
}

// SubjectProviderOAuthConfigApplyConfiguration constructs an declarative configuration of the SubjectProviderOAuthConfig type for use with
// apply.
func SubjectProviderOAuthConfig() *SubjectProviderOAuthConfigApplyConfiguration {
	return &SubjectProviderOAuthConfigApplyConfiguration{}
}

// WithAuthorizationEndpoint sets the AuthorizationEndpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AuthorizationEndpoint field is set to the value of the last call.
func (b *SubjectProviderOAuthConfigApplyConfiguration) WithAuthorizationEndpoint(value string) *SubjectProviderOAuthConfigApplyConfiguration {
	b.AuthorizationEndpoint = &value
	return b
}

// WithTokenEndpoint sets the TokenEndpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TokenEndpoint field is set to the value of the last call.
func (b *SubjectProviderOAuthConfigApplyConfiguration) WithTokenEndpoint(value string) *SubjectProviderOAuthConfigApplyConfiguration {
	b.TokenEndpoint = &value
	return b
}

// WithUserinfoEndpoint sets the UserinfoEndpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UserinfoEndpoint field is set to the value of the last call.
func (b *SubjectProviderOAuthConfigApplyConfiguration) WithUserinfoEndpoint(value string) *SubjectProviderOAuthConfigApplyConfiguration {
	b.UserinfoEndpoint = &value
	return b
}

// WithSkipInsecureVerify sets the SkipInsecureVerify field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SkipInsecureVerify field is set to the value of the last call.
func (b *SubjectProviderOAuthConfigApplyConfiguration) WithSkipInsecureVerify(value bool) *SubjectProviderOAuthConfigApplyConfiguration {
	b.SkipInsecureVerify = &value
	return b
}

// WithClientID sets the ClientID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientID field is set to the value of the last call.
func (b *SubjectProviderOAuthConfigApplyConfiguration) WithClientID(value string) *SubjectProviderOAuthConfigApplyConfiguration {
	b.ClientID = &value
	return b
}

// WithClientSecret sets the ClientSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientSecret field is set to the value of the last call.
func (b *SubjectProviderOAuthConfigApplyConfiguration) WithClientSecret(value string) *SubjectProviderOAuthConfigApplyConfiguration {
	b.ClientSecret = &value
	return b
}

// WithClaimMapping sets the ClaimMapping field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClaimMapping field is set to the value of the last call.
func (b *SubjectProviderOAuthConfigApplyConfiguration) WithClaimMapping(value *SubjectProviderOAuthClaimMappingApplyConfiguration) *SubjectProviderOAuthConfigApplyConfiguration {
	b.ClaimMapping = value
	return b
}
