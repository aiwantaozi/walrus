// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	v1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
)

// SubjectProviderMicrosoftConfigApplyConfiguration represents an declarative configuration of the SubjectProviderMicrosoftConfig type for use
// with apply.
type SubjectProviderMicrosoftConfigApplyConfiguration struct {
	ClientID     *string                            `json:"clientID,omitempty"`
	ClientSecret *string                            `json:"clientSecret,omitempty"`
	Tenant       *v1.SubjectProviderMicrosoftTenant `json:"tenant,omitempty"`
	Groups       []string                           `json:"groups,omitempty"`
}

// SubjectProviderMicrosoftConfigApplyConfiguration constructs an declarative configuration of the SubjectProviderMicrosoftConfig type for use with
// apply.
func SubjectProviderMicrosoftConfig() *SubjectProviderMicrosoftConfigApplyConfiguration {
	return &SubjectProviderMicrosoftConfigApplyConfiguration{}
}

// WithClientID sets the ClientID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientID field is set to the value of the last call.
func (b *SubjectProviderMicrosoftConfigApplyConfiguration) WithClientID(value string) *SubjectProviderMicrosoftConfigApplyConfiguration {
	b.ClientID = &value
	return b
}

// WithClientSecret sets the ClientSecret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientSecret field is set to the value of the last call.
func (b *SubjectProviderMicrosoftConfigApplyConfiguration) WithClientSecret(value string) *SubjectProviderMicrosoftConfigApplyConfiguration {
	b.ClientSecret = &value
	return b
}

// WithTenant sets the Tenant field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tenant field is set to the value of the last call.
func (b *SubjectProviderMicrosoftConfigApplyConfiguration) WithTenant(value v1.SubjectProviderMicrosoftTenant) *SubjectProviderMicrosoftConfigApplyConfiguration {
	b.Tenant = &value
	return b
}

// WithGroups adds the given value to the Groups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Groups field.
func (b *SubjectProviderMicrosoftConfigApplyConfiguration) WithGroups(values ...string) *SubjectProviderMicrosoftConfigApplyConfiguration {
	for i := range values {
		b.Groups = append(b.Groups, values[i])
	}
	return b
}
