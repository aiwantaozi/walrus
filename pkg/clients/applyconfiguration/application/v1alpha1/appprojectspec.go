// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	applicationv1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// AppProjectSpecApplyConfiguration represents an declarative configuration of the AppProjectSpec type for use
// with apply.
type AppProjectSpecApplyConfiguration struct {
	SourceRepos                     []string                                            `json:"sourceRepos,omitempty"`
	Destinations                    []ApplicationDestinationApplyConfiguration          `json:"destinations,omitempty"`
	Description                     *string                                             `json:"description,omitempty"`
	Roles                           []ProjectRoleApplyConfiguration                     `json:"roles,omitempty"`
	ClusterResourceWhitelist        []v1.GroupKind                                      `json:"clusterResourceWhitelist,omitempty"`
	NamespaceResourceBlacklist      []v1.GroupKind                                      `json:"namespaceResourceBlacklist,omitempty"`
	OrphanedResources               *OrphanedResourcesMonitorSettingsApplyConfiguration `json:"orphanedResources,omitempty"`
	SyncWindows                     *applicationv1alpha1.SyncWindows                    `json:"syncWindows,omitempty"`
	NamespaceResourceWhitelist      []v1.GroupKind                                      `json:"namespaceResourceWhitelist,omitempty"`
	SignatureKeys                   []SignatureKeyApplyConfiguration                    `json:"signatureKeys,omitempty"`
	ClusterResourceBlacklist        []v1.GroupKind                                      `json:"clusterResourceBlacklist,omitempty"`
	SourceNamespaces                []string                                            `json:"sourceNamespaces,omitempty"`
	PermitOnlyProjectScopedClusters *bool                                               `json:"permitOnlyProjectScopedClusters,omitempty"`
}

// AppProjectSpecApplyConfiguration constructs an declarative configuration of the AppProjectSpec type for use with
// apply.
func AppProjectSpec() *AppProjectSpecApplyConfiguration {
	return &AppProjectSpecApplyConfiguration{}
}

// WithSourceRepos adds the given value to the SourceRepos field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SourceRepos field.
func (b *AppProjectSpecApplyConfiguration) WithSourceRepos(values ...string) *AppProjectSpecApplyConfiguration {
	for i := range values {
		b.SourceRepos = append(b.SourceRepos, values[i])
	}
	return b
}

// WithDestinations adds the given value to the Destinations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Destinations field.
func (b *AppProjectSpecApplyConfiguration) WithDestinations(values ...*ApplicationDestinationApplyConfiguration) *AppProjectSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDestinations")
		}
		b.Destinations = append(b.Destinations, *values[i])
	}
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *AppProjectSpecApplyConfiguration) WithDescription(value string) *AppProjectSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithRoles adds the given value to the Roles field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Roles field.
func (b *AppProjectSpecApplyConfiguration) WithRoles(values ...*ProjectRoleApplyConfiguration) *AppProjectSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRoles")
		}
		b.Roles = append(b.Roles, *values[i])
	}
	return b
}

// WithClusterResourceWhitelist adds the given value to the ClusterResourceWhitelist field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClusterResourceWhitelist field.
func (b *AppProjectSpecApplyConfiguration) WithClusterResourceWhitelist(values ...v1.GroupKind) *AppProjectSpecApplyConfiguration {
	for i := range values {
		b.ClusterResourceWhitelist = append(b.ClusterResourceWhitelist, values[i])
	}
	return b
}

// WithNamespaceResourceBlacklist adds the given value to the NamespaceResourceBlacklist field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NamespaceResourceBlacklist field.
func (b *AppProjectSpecApplyConfiguration) WithNamespaceResourceBlacklist(values ...v1.GroupKind) *AppProjectSpecApplyConfiguration {
	for i := range values {
		b.NamespaceResourceBlacklist = append(b.NamespaceResourceBlacklist, values[i])
	}
	return b
}

// WithOrphanedResources sets the OrphanedResources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OrphanedResources field is set to the value of the last call.
func (b *AppProjectSpecApplyConfiguration) WithOrphanedResources(value *OrphanedResourcesMonitorSettingsApplyConfiguration) *AppProjectSpecApplyConfiguration {
	b.OrphanedResources = value
	return b
}

// WithSyncWindows sets the SyncWindows field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncWindows field is set to the value of the last call.
func (b *AppProjectSpecApplyConfiguration) WithSyncWindows(value applicationv1alpha1.SyncWindows) *AppProjectSpecApplyConfiguration {
	b.SyncWindows = &value
	return b
}

// WithNamespaceResourceWhitelist adds the given value to the NamespaceResourceWhitelist field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NamespaceResourceWhitelist field.
func (b *AppProjectSpecApplyConfiguration) WithNamespaceResourceWhitelist(values ...v1.GroupKind) *AppProjectSpecApplyConfiguration {
	for i := range values {
		b.NamespaceResourceWhitelist = append(b.NamespaceResourceWhitelist, values[i])
	}
	return b
}

// WithSignatureKeys adds the given value to the SignatureKeys field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SignatureKeys field.
func (b *AppProjectSpecApplyConfiguration) WithSignatureKeys(values ...*SignatureKeyApplyConfiguration) *AppProjectSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSignatureKeys")
		}
		b.SignatureKeys = append(b.SignatureKeys, *values[i])
	}
	return b
}

// WithClusterResourceBlacklist adds the given value to the ClusterResourceBlacklist field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClusterResourceBlacklist field.
func (b *AppProjectSpecApplyConfiguration) WithClusterResourceBlacklist(values ...v1.GroupKind) *AppProjectSpecApplyConfiguration {
	for i := range values {
		b.ClusterResourceBlacklist = append(b.ClusterResourceBlacklist, values[i])
	}
	return b
}

// WithSourceNamespaces adds the given value to the SourceNamespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SourceNamespaces field.
func (b *AppProjectSpecApplyConfiguration) WithSourceNamespaces(values ...string) *AppProjectSpecApplyConfiguration {
	for i := range values {
		b.SourceNamespaces = append(b.SourceNamespaces, values[i])
	}
	return b
}

// WithPermitOnlyProjectScopedClusters sets the PermitOnlyProjectScopedClusters field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PermitOnlyProjectScopedClusters field is set to the value of the last call.
func (b *AppProjectSpecApplyConfiguration) WithPermitOnlyProjectScopedClusters(value bool) *AppProjectSpecApplyConfiguration {
	b.PermitOnlyProjectScopedClusters = &value
	return b
}
