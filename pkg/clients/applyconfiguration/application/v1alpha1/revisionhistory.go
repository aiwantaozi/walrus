// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	applicationv1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// RevisionHistoryApplyConfiguration represents an declarative configuration of the RevisionHistory type for use
// with apply.
type RevisionHistoryApplyConfiguration struct {
	Revision        *string                                 `json:"revision,omitempty"`
	DeployedAt      *v1.Time                                `json:"deployedAt,omitempty"`
	ID              *int64                                  `json:"id,omitempty"`
	Source          *ApplicationSourceApplyConfiguration    `json:"source,omitempty"`
	DeployStartedAt *v1.Time                                `json:"deployStartedAt,omitempty"`
	Sources         *applicationv1alpha1.ApplicationSources `json:"sources,omitempty"`
	Revisions       []string                                `json:"revisions,omitempty"`
}

// RevisionHistoryApplyConfiguration constructs an declarative configuration of the RevisionHistory type for use with
// apply.
func RevisionHistory() *RevisionHistoryApplyConfiguration {
	return &RevisionHistoryApplyConfiguration{}
}

// WithRevision sets the Revision field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Revision field is set to the value of the last call.
func (b *RevisionHistoryApplyConfiguration) WithRevision(value string) *RevisionHistoryApplyConfiguration {
	b.Revision = &value
	return b
}

// WithDeployedAt sets the DeployedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeployedAt field is set to the value of the last call.
func (b *RevisionHistoryApplyConfiguration) WithDeployedAt(value v1.Time) *RevisionHistoryApplyConfiguration {
	b.DeployedAt = &value
	return b
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *RevisionHistoryApplyConfiguration) WithID(value int64) *RevisionHistoryApplyConfiguration {
	b.ID = &value
	return b
}

// WithSource sets the Source field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Source field is set to the value of the last call.
func (b *RevisionHistoryApplyConfiguration) WithSource(value *ApplicationSourceApplyConfiguration) *RevisionHistoryApplyConfiguration {
	b.Source = value
	return b
}

// WithDeployStartedAt sets the DeployStartedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeployStartedAt field is set to the value of the last call.
func (b *RevisionHistoryApplyConfiguration) WithDeployStartedAt(value v1.Time) *RevisionHistoryApplyConfiguration {
	b.DeployStartedAt = &value
	return b
}

// WithSources sets the Sources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Sources field is set to the value of the last call.
func (b *RevisionHistoryApplyConfiguration) WithSources(value applicationv1alpha1.ApplicationSources) *RevisionHistoryApplyConfiguration {
	b.Sources = &value
	return b
}

// WithRevisions adds the given value to the Revisions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Revisions field.
func (b *RevisionHistoryApplyConfiguration) WithRevisions(values ...string) *RevisionHistoryApplyConfiguration {
	for i := range values {
		b.Revisions = append(b.Revisions, values[i])
	}
	return b
}
