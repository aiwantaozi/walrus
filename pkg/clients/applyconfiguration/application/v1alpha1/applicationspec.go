// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	applicationv1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
)

// ApplicationSpecApplyConfiguration represents an declarative configuration of the ApplicationSpec type for use
// with apply.
type ApplicationSpecApplyConfiguration struct {
	Source               *ApplicationSourceApplyConfiguration      `json:"source,omitempty"`
	Destination          *ApplicationDestinationApplyConfiguration `json:"destination,omitempty"`
	Project              *string                                   `json:"project,omitempty"`
	SyncPolicy           *SyncPolicyApplyConfiguration             `json:"syncPolicy,omitempty"`
	IgnoreDifferences    *applicationv1alpha1.IgnoreDifferences    `json:"ignoreDifferences,omitempty"`
	Info                 []InfoApplyConfiguration                  `json:"info,omitempty"`
	RevisionHistoryLimit *int64                                    `json:"revisionHistoryLimit,omitempty"`
	Sources              *applicationv1alpha1.ApplicationSources   `json:"sources,omitempty"`
}

// ApplicationSpecApplyConfiguration constructs an declarative configuration of the ApplicationSpec type for use with
// apply.
func ApplicationSpec() *ApplicationSpecApplyConfiguration {
	return &ApplicationSpecApplyConfiguration{}
}

// WithSource sets the Source field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Source field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithSource(value *ApplicationSourceApplyConfiguration) *ApplicationSpecApplyConfiguration {
	b.Source = value
	return b
}

// WithDestination sets the Destination field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Destination field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithDestination(value *ApplicationDestinationApplyConfiguration) *ApplicationSpecApplyConfiguration {
	b.Destination = value
	return b
}

// WithProject sets the Project field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Project field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithProject(value string) *ApplicationSpecApplyConfiguration {
	b.Project = &value
	return b
}

// WithSyncPolicy sets the SyncPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncPolicy field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithSyncPolicy(value *SyncPolicyApplyConfiguration) *ApplicationSpecApplyConfiguration {
	b.SyncPolicy = value
	return b
}

// WithIgnoreDifferences sets the IgnoreDifferences field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IgnoreDifferences field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithIgnoreDifferences(value applicationv1alpha1.IgnoreDifferences) *ApplicationSpecApplyConfiguration {
	b.IgnoreDifferences = &value
	return b
}

// WithInfo adds the given value to the Info field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Info field.
func (b *ApplicationSpecApplyConfiguration) WithInfo(values ...*InfoApplyConfiguration) *ApplicationSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInfo")
		}
		b.Info = append(b.Info, *values[i])
	}
	return b
}

// WithRevisionHistoryLimit sets the RevisionHistoryLimit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RevisionHistoryLimit field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithRevisionHistoryLimit(value int64) *ApplicationSpecApplyConfiguration {
	b.RevisionHistoryLimit = &value
	return b
}

// WithSources sets the Sources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Sources field is set to the value of the last call.
func (b *ApplicationSpecApplyConfiguration) WithSources(value applicationv1alpha1.ApplicationSources) *ApplicationSpecApplyConfiguration {
	b.Sources = &value
	return b
}
