// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	applicationv1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
)

// OperationApplyConfiguration represents an declarative configuration of the Operation type for use
// with apply.
type OperationApplyConfiguration struct {
	Sync        *SyncOperationApplyConfiguration      `json:"sync,omitempty"`
	InitiatedBy *OperationInitiatorApplyConfiguration `json:"initiatedBy,omitempty"`
	Info        []*applicationv1alpha1.Info           `json:"info,omitempty"`
	Retry       *RetryStrategyApplyConfiguration      `json:"retry,omitempty"`
}

// OperationApplyConfiguration constructs an declarative configuration of the Operation type for use with
// apply.
func Operation() *OperationApplyConfiguration {
	return &OperationApplyConfiguration{}
}

// WithSync sets the Sync field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Sync field is set to the value of the last call.
func (b *OperationApplyConfiguration) WithSync(value *SyncOperationApplyConfiguration) *OperationApplyConfiguration {
	b.Sync = value
	return b
}

// WithInitiatedBy sets the InitiatedBy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InitiatedBy field is set to the value of the last call.
func (b *OperationApplyConfiguration) WithInitiatedBy(value *OperationInitiatorApplyConfiguration) *OperationApplyConfiguration {
	b.InitiatedBy = value
	return b
}

// WithInfo adds the given value to the Info field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Info field.
func (b *OperationApplyConfiguration) WithInfo(values ...**applicationv1alpha1.Info) *OperationApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInfo")
		}
		b.Info = append(b.Info, *values[i])
	}
	return b
}

// WithRetry sets the Retry field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Retry field is set to the value of the last call.
func (b *OperationApplyConfiguration) WithRetry(value *RetryStrategyApplyConfiguration) *OperationApplyConfiguration {
	b.Retry = value
	return b
}
