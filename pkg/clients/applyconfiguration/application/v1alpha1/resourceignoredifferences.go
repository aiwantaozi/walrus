// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// ResourceIgnoreDifferencesApplyConfiguration represents an declarative configuration of the ResourceIgnoreDifferences type for use
// with apply.
type ResourceIgnoreDifferencesApplyConfiguration struct {
	Group                 *string  `json:"group,omitempty"`
	Kind                  *string  `json:"kind,omitempty"`
	Name                  *string  `json:"name,omitempty"`
	Namespace             *string  `json:"namespace,omitempty"`
	JSONPointers          []string `json:"jsonPointers,omitempty"`
	JQPathExpressions     []string `json:"jqPathExpressions,omitempty"`
	ManagedFieldsManagers []string `json:"managedFieldsManagers,omitempty"`
}

// ResourceIgnoreDifferencesApplyConfiguration constructs an declarative configuration of the ResourceIgnoreDifferences type for use with
// apply.
func ResourceIgnoreDifferences() *ResourceIgnoreDifferencesApplyConfiguration {
	return &ResourceIgnoreDifferencesApplyConfiguration{}
}

// WithGroup sets the Group field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Group field is set to the value of the last call.
func (b *ResourceIgnoreDifferencesApplyConfiguration) WithGroup(value string) *ResourceIgnoreDifferencesApplyConfiguration {
	b.Group = &value
	return b
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *ResourceIgnoreDifferencesApplyConfiguration) WithKind(value string) *ResourceIgnoreDifferencesApplyConfiguration {
	b.Kind = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ResourceIgnoreDifferencesApplyConfiguration) WithName(value string) *ResourceIgnoreDifferencesApplyConfiguration {
	b.Name = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *ResourceIgnoreDifferencesApplyConfiguration) WithNamespace(value string) *ResourceIgnoreDifferencesApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithJSONPointers adds the given value to the JSONPointers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the JSONPointers field.
func (b *ResourceIgnoreDifferencesApplyConfiguration) WithJSONPointers(values ...string) *ResourceIgnoreDifferencesApplyConfiguration {
	for i := range values {
		b.JSONPointers = append(b.JSONPointers, values[i])
	}
	return b
}

// WithJQPathExpressions adds the given value to the JQPathExpressions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the JQPathExpressions field.
func (b *ResourceIgnoreDifferencesApplyConfiguration) WithJQPathExpressions(values ...string) *ResourceIgnoreDifferencesApplyConfiguration {
	for i := range values {
		b.JQPathExpressions = append(b.JQPathExpressions, values[i])
	}
	return b
}

// WithManagedFieldsManagers adds the given value to the ManagedFieldsManagers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ManagedFieldsManagers field.
func (b *ResourceIgnoreDifferencesApplyConfiguration) WithManagedFieldsManagers(values ...string) *ResourceIgnoreDifferencesApplyConfiguration {
	for i := range values {
		b.ManagedFieldsManagers = append(b.ManagedFieldsManagers, values[i])
	}
	return b
}
