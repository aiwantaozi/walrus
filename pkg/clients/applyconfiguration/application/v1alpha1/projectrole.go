// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// ProjectRoleApplyConfiguration represents an declarative configuration of the ProjectRole type for use
// with apply.
type ProjectRoleApplyConfiguration struct {
	Name        *string                      `json:"name,omitempty"`
	Description *string                      `json:"description,omitempty"`
	Policies    []string                     `json:"policies,omitempty"`
	JWTTokens   []JWTTokenApplyConfiguration `json:"jwtTokens,omitempty"`
	Groups      []string                     `json:"groups,omitempty"`
}

// ProjectRoleApplyConfiguration constructs an declarative configuration of the ProjectRole type for use with
// apply.
func ProjectRole() *ProjectRoleApplyConfiguration {
	return &ProjectRoleApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ProjectRoleApplyConfiguration) WithName(value string) *ProjectRoleApplyConfiguration {
	b.Name = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *ProjectRoleApplyConfiguration) WithDescription(value string) *ProjectRoleApplyConfiguration {
	b.Description = &value
	return b
}

// WithPolicies adds the given value to the Policies field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Policies field.
func (b *ProjectRoleApplyConfiguration) WithPolicies(values ...string) *ProjectRoleApplyConfiguration {
	for i := range values {
		b.Policies = append(b.Policies, values[i])
	}
	return b
}

// WithJWTTokens adds the given value to the JWTTokens field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the JWTTokens field.
func (b *ProjectRoleApplyConfiguration) WithJWTTokens(values ...*JWTTokenApplyConfiguration) *ProjectRoleApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithJWTTokens")
		}
		b.JWTTokens = append(b.JWTTokens, *values[i])
	}
	return b
}

// WithGroups adds the given value to the Groups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Groups field.
func (b *ProjectRoleApplyConfiguration) WithGroups(values ...string) *ProjectRoleApplyConfiguration {
	for i := range values {
		b.Groups = append(b.Groups, values[i])
	}
	return b
}
