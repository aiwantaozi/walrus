// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

// ApplicationSetRolloutStepApplyConfiguration represents an declarative configuration of the ApplicationSetRolloutStep type for use
// with apply.
type ApplicationSetRolloutStepApplyConfiguration struct {
	MatchExpressions []ApplicationMatchExpressionApplyConfiguration `json:"matchExpressions,omitempty"`
	MaxUpdate        *intstr.IntOrString                            `json:"maxUpdate,omitempty"`
}

// ApplicationSetRolloutStepApplyConfiguration constructs an declarative configuration of the ApplicationSetRolloutStep type for use with
// apply.
func ApplicationSetRolloutStep() *ApplicationSetRolloutStepApplyConfiguration {
	return &ApplicationSetRolloutStepApplyConfiguration{}
}

// WithMatchExpressions adds the given value to the MatchExpressions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MatchExpressions field.
func (b *ApplicationSetRolloutStepApplyConfiguration) WithMatchExpressions(values ...*ApplicationMatchExpressionApplyConfiguration) *ApplicationSetRolloutStepApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMatchExpressions")
		}
		b.MatchExpressions = append(b.MatchExpressions, *values[i])
	}
	return b
}

// WithMaxUpdate sets the MaxUpdate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxUpdate field is set to the value of the last call.
func (b *ApplicationSetRolloutStepApplyConfiguration) WithMaxUpdate(value intstr.IntOrString) *ApplicationSetRolloutStepApplyConfiguration {
	b.MaxUpdate = &value
	return b
}
