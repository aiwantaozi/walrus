// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// ApplicationSetResourceIgnoreDifferencesApplyConfiguration represents an declarative configuration of the ApplicationSetResourceIgnoreDifferences type for use
// with apply.
type ApplicationSetResourceIgnoreDifferencesApplyConfiguration struct {
	Name              *string  `json:"name,omitempty"`
	JSONPointers      []string `json:"jsonPointers,omitempty"`
	JQPathExpressions []string `json:"jqPathExpressions,omitempty"`
}

// ApplicationSetResourceIgnoreDifferencesApplyConfiguration constructs an declarative configuration of the ApplicationSetResourceIgnoreDifferences type for use with
// apply.
func ApplicationSetResourceIgnoreDifferences() *ApplicationSetResourceIgnoreDifferencesApplyConfiguration {
	return &ApplicationSetResourceIgnoreDifferencesApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ApplicationSetResourceIgnoreDifferencesApplyConfiguration) WithName(value string) *ApplicationSetResourceIgnoreDifferencesApplyConfiguration {
	b.Name = &value
	return b
}

// WithJSONPointers adds the given value to the JSONPointers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the JSONPointers field.
func (b *ApplicationSetResourceIgnoreDifferencesApplyConfiguration) WithJSONPointers(values ...string) *ApplicationSetResourceIgnoreDifferencesApplyConfiguration {
	for i := range values {
		b.JSONPointers = append(b.JSONPointers, values[i])
	}
	return b
}

// WithJQPathExpressions adds the given value to the JQPathExpressions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the JQPathExpressions field.
func (b *ApplicationSetResourceIgnoreDifferencesApplyConfiguration) WithJQPathExpressions(values ...string) *ApplicationSetResourceIgnoreDifferencesApplyConfiguration {
	for i := range values {
		b.JQPathExpressions = append(b.JQPathExpressions, values[i])
	}
	return b
}
