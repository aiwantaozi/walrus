// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	common "github.com/argoproj/gitops-engine/pkg/sync/common"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// OperationStateApplyConfiguration represents an declarative configuration of the OperationState type for use
// with apply.
type OperationStateApplyConfiguration struct {
	Operation  *OperationApplyConfiguration           `json:"operation,omitempty"`
	Phase      *common.OperationPhase                 `json:"phase,omitempty"`
	Message    *string                                `json:"message,omitempty"`
	SyncResult *SyncOperationResultApplyConfiguration `json:"syncResult,omitempty"`
	StartedAt  *v1.Time                               `json:"startedAt,omitempty"`
	FinishedAt *v1.Time                               `json:"finishedAt,omitempty"`
	RetryCount *int64                                 `json:"retryCount,omitempty"`
}

// OperationStateApplyConfiguration constructs an declarative configuration of the OperationState type for use with
// apply.
func OperationState() *OperationStateApplyConfiguration {
	return &OperationStateApplyConfiguration{}
}

// WithOperation sets the Operation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Operation field is set to the value of the last call.
func (b *OperationStateApplyConfiguration) WithOperation(value *OperationApplyConfiguration) *OperationStateApplyConfiguration {
	b.Operation = value
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *OperationStateApplyConfiguration) WithPhase(value common.OperationPhase) *OperationStateApplyConfiguration {
	b.Phase = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *OperationStateApplyConfiguration) WithMessage(value string) *OperationStateApplyConfiguration {
	b.Message = &value
	return b
}

// WithSyncResult sets the SyncResult field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncResult field is set to the value of the last call.
func (b *OperationStateApplyConfiguration) WithSyncResult(value *SyncOperationResultApplyConfiguration) *OperationStateApplyConfiguration {
	b.SyncResult = value
	return b
}

// WithStartedAt sets the StartedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartedAt field is set to the value of the last call.
func (b *OperationStateApplyConfiguration) WithStartedAt(value v1.Time) *OperationStateApplyConfiguration {
	b.StartedAt = &value
	return b
}

// WithFinishedAt sets the FinishedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FinishedAt field is set to the value of the last call.
func (b *OperationStateApplyConfiguration) WithFinishedAt(value v1.Time) *OperationStateApplyConfiguration {
	b.FinishedAt = &value
	return b
}

// WithRetryCount sets the RetryCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RetryCount field is set to the value of the last call.
func (b *OperationStateApplyConfiguration) WithRetryCount(value int64) *OperationStateApplyConfiguration {
	b.RetryCount = &value
	return b
}
