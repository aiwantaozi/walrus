// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// DuckTypeGeneratorApplyConfiguration represents an declarative configuration of the DuckTypeGenerator type for use
// with apply.
type DuckTypeGeneratorApplyConfiguration struct {
	ConfigMapRef        *string                                   `json:"configMapRef,omitempty"`
	Name                *string                                   `json:"name,omitempty"`
	RequeueAfterSeconds *int64                                    `json:"requeueAfterSeconds,omitempty"`
	LabelSelector       *v1.LabelSelectorApplyConfiguration       `json:"labelSelector,omitempty"`
	Template            *ApplicationSetTemplateApplyConfiguration `json:"template,omitempty"`
	Values              map[string]string                         `json:"values,omitempty"`
}

// DuckTypeGeneratorApplyConfiguration constructs an declarative configuration of the DuckTypeGenerator type for use with
// apply.
func DuckTypeGenerator() *DuckTypeGeneratorApplyConfiguration {
	return &DuckTypeGeneratorApplyConfiguration{}
}

// WithConfigMapRef sets the ConfigMapRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigMapRef field is set to the value of the last call.
func (b *DuckTypeGeneratorApplyConfiguration) WithConfigMapRef(value string) *DuckTypeGeneratorApplyConfiguration {
	b.ConfigMapRef = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *DuckTypeGeneratorApplyConfiguration) WithName(value string) *DuckTypeGeneratorApplyConfiguration {
	b.Name = &value
	return b
}

// WithRequeueAfterSeconds sets the RequeueAfterSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RequeueAfterSeconds field is set to the value of the last call.
func (b *DuckTypeGeneratorApplyConfiguration) WithRequeueAfterSeconds(value int64) *DuckTypeGeneratorApplyConfiguration {
	b.RequeueAfterSeconds = &value
	return b
}

// WithLabelSelector sets the LabelSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LabelSelector field is set to the value of the last call.
func (b *DuckTypeGeneratorApplyConfiguration) WithLabelSelector(value *v1.LabelSelectorApplyConfiguration) *DuckTypeGeneratorApplyConfiguration {
	b.LabelSelector = value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *DuckTypeGeneratorApplyConfiguration) WithTemplate(value *ApplicationSetTemplateApplyConfiguration) *DuckTypeGeneratorApplyConfiguration {
	b.Template = value
	return b
}

// WithValues puts the entries into the Values field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Values field,
// overwriting an existing map entries in Values field with the same key.
func (b *DuckTypeGeneratorApplyConfiguration) WithValues(entries map[string]string) *DuckTypeGeneratorApplyConfiguration {
	if b.Values == nil && len(entries) > 0 {
		b.Values = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Values[k] = v
	}
	return b
}
