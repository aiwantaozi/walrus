// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// ApplicationSetStatusApplyConfiguration represents an declarative configuration of the ApplicationSetStatus type for use
// with apply.
type ApplicationSetStatusApplyConfiguration struct {
	Conditions        []ApplicationSetConditionApplyConfiguration         `json:"conditions,omitempty"`
	ApplicationStatus []ApplicationSetApplicationStatusApplyConfiguration `json:"applicationStatus,omitempty"`
}

// ApplicationSetStatusApplyConfiguration constructs an declarative configuration of the ApplicationSetStatus type for use with
// apply.
func ApplicationSetStatus() *ApplicationSetStatusApplyConfiguration {
	return &ApplicationSetStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *ApplicationSetStatusApplyConfiguration) WithConditions(values ...*ApplicationSetConditionApplyConfiguration) *ApplicationSetStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithApplicationStatus adds the given value to the ApplicationStatus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ApplicationStatus field.
func (b *ApplicationSetStatusApplyConfiguration) WithApplicationStatus(values ...*ApplicationSetApplicationStatusApplyConfiguration) *ApplicationSetStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithApplicationStatus")
		}
		b.ApplicationStatus = append(b.ApplicationStatus, *values[i])
	}
	return b
}
