// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// SyncWindowApplyConfiguration represents an declarative configuration of the SyncWindow type for use
// with apply.
type SyncWindowApplyConfiguration struct {
	Kind         *string  `json:"kind,omitempty"`
	Schedule     *string  `json:"schedule,omitempty"`
	Duration     *string  `json:"duration,omitempty"`
	Applications []string `json:"applications,omitempty"`
	Namespaces   []string `json:"namespaces,omitempty"`
	Clusters     []string `json:"clusters,omitempty"`
	ManualSync   *bool    `json:"manualSync,omitempty"`
	TimeZone     *string  `json:"timeZone,omitempty"`
}

// SyncWindowApplyConfiguration constructs an declarative configuration of the SyncWindow type for use with
// apply.
func SyncWindow() *SyncWindowApplyConfiguration {
	return &SyncWindowApplyConfiguration{}
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *SyncWindowApplyConfiguration) WithKind(value string) *SyncWindowApplyConfiguration {
	b.Kind = &value
	return b
}

// WithSchedule sets the Schedule field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Schedule field is set to the value of the last call.
func (b *SyncWindowApplyConfiguration) WithSchedule(value string) *SyncWindowApplyConfiguration {
	b.Schedule = &value
	return b
}

// WithDuration sets the Duration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Duration field is set to the value of the last call.
func (b *SyncWindowApplyConfiguration) WithDuration(value string) *SyncWindowApplyConfiguration {
	b.Duration = &value
	return b
}

// WithApplications adds the given value to the Applications field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Applications field.
func (b *SyncWindowApplyConfiguration) WithApplications(values ...string) *SyncWindowApplyConfiguration {
	for i := range values {
		b.Applications = append(b.Applications, values[i])
	}
	return b
}

// WithNamespaces adds the given value to the Namespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Namespaces field.
func (b *SyncWindowApplyConfiguration) WithNamespaces(values ...string) *SyncWindowApplyConfiguration {
	for i := range values {
		b.Namespaces = append(b.Namespaces, values[i])
	}
	return b
}

// WithClusters adds the given value to the Clusters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Clusters field.
func (b *SyncWindowApplyConfiguration) WithClusters(values ...string) *SyncWindowApplyConfiguration {
	for i := range values {
		b.Clusters = append(b.Clusters, values[i])
	}
	return b
}

// WithManualSync sets the ManualSync field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ManualSync field is set to the value of the last call.
func (b *SyncWindowApplyConfiguration) WithManualSync(value bool) *SyncWindowApplyConfiguration {
	b.ManualSync = &value
	return b
}

// WithTimeZone sets the TimeZone field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TimeZone field is set to the value of the last call.
func (b *SyncWindowApplyConfiguration) WithTimeZone(value string) *SyncWindowApplyConfiguration {
	b.TimeZone = &value
	return b
}
