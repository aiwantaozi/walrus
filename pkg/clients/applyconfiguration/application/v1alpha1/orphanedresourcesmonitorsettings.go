// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// OrphanedResourcesMonitorSettingsApplyConfiguration represents an declarative configuration of the OrphanedResourcesMonitorSettings type for use
// with apply.
type OrphanedResourcesMonitorSettingsApplyConfiguration struct {
	Warn   *bool                                   `json:"warn,omitempty"`
	Ignore []OrphanedResourceKeyApplyConfiguration `json:"ignore,omitempty"`
}

// OrphanedResourcesMonitorSettingsApplyConfiguration constructs an declarative configuration of the OrphanedResourcesMonitorSettings type for use with
// apply.
func OrphanedResourcesMonitorSettings() *OrphanedResourcesMonitorSettingsApplyConfiguration {
	return &OrphanedResourcesMonitorSettingsApplyConfiguration{}
}

// WithWarn sets the Warn field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Warn field is set to the value of the last call.
func (b *OrphanedResourcesMonitorSettingsApplyConfiguration) WithWarn(value bool) *OrphanedResourcesMonitorSettingsApplyConfiguration {
	b.Warn = &value
	return b
}

// WithIgnore adds the given value to the Ignore field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Ignore field.
func (b *OrphanedResourcesMonitorSettingsApplyConfiguration) WithIgnore(values ...*OrphanedResourceKeyApplyConfiguration) *OrphanedResourcesMonitorSettingsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithIgnore")
		}
		b.Ignore = append(b.Ignore, *values[i])
	}
	return b
}
