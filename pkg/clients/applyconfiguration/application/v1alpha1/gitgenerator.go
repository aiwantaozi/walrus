// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// GitGeneratorApplyConfiguration represents an declarative configuration of the GitGenerator type for use
// with apply.
type GitGeneratorApplyConfiguration struct {
	RepoURL             *string                                       `json:"repoURL,omitempty"`
	Directories         []GitDirectoryGeneratorItemApplyConfiguration `json:"directories,omitempty"`
	Files               []GitFileGeneratorItemApplyConfiguration      `json:"files,omitempty"`
	Revision            *string                                       `json:"revision,omitempty"`
	RequeueAfterSeconds *int64                                        `json:"requeueAfterSeconds,omitempty"`
	Template            *ApplicationSetTemplateApplyConfiguration     `json:"template,omitempty"`
	PathParamPrefix     *string                                       `json:"pathParamPrefix,omitempty"`
	Values              map[string]string                             `json:"values,omitempty"`
}

// GitGeneratorApplyConfiguration constructs an declarative configuration of the GitGenerator type for use with
// apply.
func GitGenerator() *GitGeneratorApplyConfiguration {
	return &GitGeneratorApplyConfiguration{}
}

// WithRepoURL sets the RepoURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RepoURL field is set to the value of the last call.
func (b *GitGeneratorApplyConfiguration) WithRepoURL(value string) *GitGeneratorApplyConfiguration {
	b.RepoURL = &value
	return b
}

// WithDirectories adds the given value to the Directories field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Directories field.
func (b *GitGeneratorApplyConfiguration) WithDirectories(values ...*GitDirectoryGeneratorItemApplyConfiguration) *GitGeneratorApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDirectories")
		}
		b.Directories = append(b.Directories, *values[i])
	}
	return b
}

// WithFiles adds the given value to the Files field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Files field.
func (b *GitGeneratorApplyConfiguration) WithFiles(values ...*GitFileGeneratorItemApplyConfiguration) *GitGeneratorApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFiles")
		}
		b.Files = append(b.Files, *values[i])
	}
	return b
}

// WithRevision sets the Revision field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Revision field is set to the value of the last call.
func (b *GitGeneratorApplyConfiguration) WithRevision(value string) *GitGeneratorApplyConfiguration {
	b.Revision = &value
	return b
}

// WithRequeueAfterSeconds sets the RequeueAfterSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RequeueAfterSeconds field is set to the value of the last call.
func (b *GitGeneratorApplyConfiguration) WithRequeueAfterSeconds(value int64) *GitGeneratorApplyConfiguration {
	b.RequeueAfterSeconds = &value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *GitGeneratorApplyConfiguration) WithTemplate(value *ApplicationSetTemplateApplyConfiguration) *GitGeneratorApplyConfiguration {
	b.Template = value
	return b
}

// WithPathParamPrefix sets the PathParamPrefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PathParamPrefix field is set to the value of the last call.
func (b *GitGeneratorApplyConfiguration) WithPathParamPrefix(value string) *GitGeneratorApplyConfiguration {
	b.PathParamPrefix = &value
	return b
}

// WithValues puts the entries into the Values field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Values field,
// overwriting an existing map entries in Values field with the same key.
func (b *GitGeneratorApplyConfiguration) WithValues(entries map[string]string) *GitGeneratorApplyConfiguration {
	if b.Values == nil && len(entries) > 0 {
		b.Values = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Values[k] = v
	}
	return b
}
