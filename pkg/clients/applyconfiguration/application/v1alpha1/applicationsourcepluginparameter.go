// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// ApplicationSourcePluginParameterApplyConfiguration represents an declarative configuration of the ApplicationSourcePluginParameter type for use
// with apply.
type ApplicationSourcePluginParameterApplyConfiguration struct {
	Name                             *string `json:"name,omitempty"`
	String_                          *string `json:"string,omitempty"`
	*OptionalMapApplyConfiguration   `json:"OptionalMap,omitempty"`
	*OptionalArrayApplyConfiguration `json:"OptionalArray,omitempty"`
}

// ApplicationSourcePluginParameterApplyConfiguration constructs an declarative configuration of the ApplicationSourcePluginParameter type for use with
// apply.
func ApplicationSourcePluginParameter() *ApplicationSourcePluginParameterApplyConfiguration {
	return &ApplicationSourcePluginParameterApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ApplicationSourcePluginParameterApplyConfiguration) WithName(value string) *ApplicationSourcePluginParameterApplyConfiguration {
	b.Name = &value
	return b
}

// WithString_ sets the String_ field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the String_ field is set to the value of the last call.
func (b *ApplicationSourcePluginParameterApplyConfiguration) WithString_(value string) *ApplicationSourcePluginParameterApplyConfiguration {
	b.String_ = &value
	return b
}

func (b *ApplicationSourcePluginParameterApplyConfiguration) ensureOptionalMapApplyConfigurationExists() {
	if b.OptionalMapApplyConfiguration == nil {
		b.OptionalMapApplyConfiguration = &OptionalMapApplyConfiguration{}
	}
}

func (b *ApplicationSourcePluginParameterApplyConfiguration) ensureOptionalArrayApplyConfigurationExists() {
	if b.OptionalArrayApplyConfiguration == nil {
		b.OptionalArrayApplyConfiguration = &OptionalArrayApplyConfiguration{}
	}
}
