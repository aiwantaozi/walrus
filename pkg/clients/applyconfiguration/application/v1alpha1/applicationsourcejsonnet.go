// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// ApplicationSourceJsonnetApplyConfiguration represents an declarative configuration of the ApplicationSourceJsonnet type for use
// with apply.
type ApplicationSourceJsonnetApplyConfiguration struct {
	ExtVars []JsonnetVarApplyConfiguration `json:"extVars,omitempty"`
	TLAs    []JsonnetVarApplyConfiguration `json:"tlas,omitempty"`
	Libs    []string                       `json:"libs,omitempty"`
}

// ApplicationSourceJsonnetApplyConfiguration constructs an declarative configuration of the ApplicationSourceJsonnet type for use with
// apply.
func ApplicationSourceJsonnet() *ApplicationSourceJsonnetApplyConfiguration {
	return &ApplicationSourceJsonnetApplyConfiguration{}
}

// WithExtVars adds the given value to the ExtVars field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExtVars field.
func (b *ApplicationSourceJsonnetApplyConfiguration) WithExtVars(values ...*JsonnetVarApplyConfiguration) *ApplicationSourceJsonnetApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithExtVars")
		}
		b.ExtVars = append(b.ExtVars, *values[i])
	}
	return b
}

// WithTLAs adds the given value to the TLAs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TLAs field.
func (b *ApplicationSourceJsonnetApplyConfiguration) WithTLAs(values ...*JsonnetVarApplyConfiguration) *ApplicationSourceJsonnetApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTLAs")
		}
		b.TLAs = append(b.TLAs, *values[i])
	}
	return b
}

// WithLibs adds the given value to the Libs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Libs field.
func (b *ApplicationSourceJsonnetApplyConfiguration) WithLibs(values ...string) *ApplicationSourceJsonnetApplyConfiguration {
	for i := range values {
		b.Libs = append(b.Libs, values[i])
	}
	return b
}
