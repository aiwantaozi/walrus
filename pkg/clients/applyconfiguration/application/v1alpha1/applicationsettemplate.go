// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// ApplicationSetTemplateApplyConfiguration represents an declarative configuration of the ApplicationSetTemplate type for use
// with apply.
type ApplicationSetTemplateApplyConfiguration struct {
	*ApplicationSetTemplateMetaApplyConfiguration `json:"metadata,omitempty"`
	Spec                                          *ApplicationSpecApplyConfiguration `json:"spec,omitempty"`
}

// ApplicationSetTemplateApplyConfiguration constructs an declarative configuration of the ApplicationSetTemplate type for use with
// apply.
func ApplicationSetTemplate() *ApplicationSetTemplateApplyConfiguration {
	return &ApplicationSetTemplateApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ApplicationSetTemplateApplyConfiguration) WithName(value string) *ApplicationSetTemplateApplyConfiguration {
	b.ensureApplicationSetTemplateMetaApplyConfigurationExists()
	b.Name = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *ApplicationSetTemplateApplyConfiguration) WithNamespace(value string) *ApplicationSetTemplateApplyConfiguration {
	b.ensureApplicationSetTemplateMetaApplyConfigurationExists()
	b.Namespace = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *ApplicationSetTemplateApplyConfiguration) WithLabels(entries map[string]string) *ApplicationSetTemplateApplyConfiguration {
	b.ensureApplicationSetTemplateMetaApplyConfigurationExists()
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *ApplicationSetTemplateApplyConfiguration) WithAnnotations(entries map[string]string) *ApplicationSetTemplateApplyConfiguration {
	b.ensureApplicationSetTemplateMetaApplyConfigurationExists()
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithFinalizers adds the given value to the Finalizers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Finalizers field.
func (b *ApplicationSetTemplateApplyConfiguration) WithFinalizers(values ...string) *ApplicationSetTemplateApplyConfiguration {
	b.ensureApplicationSetTemplateMetaApplyConfigurationExists()
	for i := range values {
		b.Finalizers = append(b.Finalizers, values[i])
	}
	return b
}

func (b *ApplicationSetTemplateApplyConfiguration) ensureApplicationSetTemplateMetaApplyConfigurationExists() {
	if b.ApplicationSetTemplateMetaApplyConfiguration == nil {
		b.ApplicationSetTemplateMetaApplyConfiguration = &ApplicationSetTemplateMetaApplyConfiguration{}
	}
}

// WithSpec sets the Spec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Spec field is set to the value of the last call.
func (b *ApplicationSetTemplateApplyConfiguration) WithSpec(value *ApplicationSpecApplyConfiguration) *ApplicationSetTemplateApplyConfiguration {
	b.Spec = value
	return b
}
