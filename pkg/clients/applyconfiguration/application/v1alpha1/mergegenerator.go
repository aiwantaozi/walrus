// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// MergeGeneratorApplyConfiguration represents an declarative configuration of the MergeGenerator type for use
// with apply.
type MergeGeneratorApplyConfiguration struct {
	Generators []ApplicationSetNestedGeneratorApplyConfiguration `json:"generators,omitempty"`
	MergeKeys  []string                                          `json:"mergeKeys,omitempty"`
	Template   *ApplicationSetTemplateApplyConfiguration         `json:"template,omitempty"`
}

// MergeGeneratorApplyConfiguration constructs an declarative configuration of the MergeGenerator type for use with
// apply.
func MergeGenerator() *MergeGeneratorApplyConfiguration {
	return &MergeGeneratorApplyConfiguration{}
}

// WithGenerators adds the given value to the Generators field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Generators field.
func (b *MergeGeneratorApplyConfiguration) WithGenerators(values ...*ApplicationSetNestedGeneratorApplyConfiguration) *MergeGeneratorApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithGenerators")
		}
		b.Generators = append(b.Generators, *values[i])
	}
	return b
}

// WithMergeKeys adds the given value to the MergeKeys field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MergeKeys field.
func (b *MergeGeneratorApplyConfiguration) WithMergeKeys(values ...string) *MergeGeneratorApplyConfiguration {
	for i := range values {
		b.MergeKeys = append(b.MergeKeys, values[i])
	}
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *MergeGeneratorApplyConfiguration) WithTemplate(value *ApplicationSetTemplateApplyConfiguration) *MergeGeneratorApplyConfiguration {
	b.Template = value
	return b
}
