// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ApplicationSourceHelmApplyConfiguration represents an declarative configuration of the ApplicationSourceHelm type for use
// with apply.
type ApplicationSourceHelmApplyConfiguration struct {
	ValueFiles              []string                              `json:"valueFiles,omitempty"`
	Parameters              []HelmParameterApplyConfiguration     `json:"parameters,omitempty"`
	ReleaseName             *string                               `json:"releaseName,omitempty"`
	Values                  *string                               `json:"values,omitempty"`
	FileParameters          []HelmFileParameterApplyConfiguration `json:"fileParameters,omitempty"`
	Version                 *string                               `json:"version,omitempty"`
	PassCredentials         *bool                                 `json:"passCredentials,omitempty"`
	IgnoreMissingValueFiles *bool                                 `json:"ignoreMissingValueFiles,omitempty"`
	SkipCrds                *bool                                 `json:"skipCrds,omitempty"`
	ValuesObject            *runtime.RawExtension                 `json:"valuesObject,omitempty"`
}

// ApplicationSourceHelmApplyConfiguration constructs an declarative configuration of the ApplicationSourceHelm type for use with
// apply.
func ApplicationSourceHelm() *ApplicationSourceHelmApplyConfiguration {
	return &ApplicationSourceHelmApplyConfiguration{}
}

// WithValueFiles adds the given value to the ValueFiles field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ValueFiles field.
func (b *ApplicationSourceHelmApplyConfiguration) WithValueFiles(values ...string) *ApplicationSourceHelmApplyConfiguration {
	for i := range values {
		b.ValueFiles = append(b.ValueFiles, values[i])
	}
	return b
}

// WithParameters adds the given value to the Parameters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Parameters field.
func (b *ApplicationSourceHelmApplyConfiguration) WithParameters(values ...*HelmParameterApplyConfiguration) *ApplicationSourceHelmApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithParameters")
		}
		b.Parameters = append(b.Parameters, *values[i])
	}
	return b
}

// WithReleaseName sets the ReleaseName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReleaseName field is set to the value of the last call.
func (b *ApplicationSourceHelmApplyConfiguration) WithReleaseName(value string) *ApplicationSourceHelmApplyConfiguration {
	b.ReleaseName = &value
	return b
}

// WithValues sets the Values field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Values field is set to the value of the last call.
func (b *ApplicationSourceHelmApplyConfiguration) WithValues(value string) *ApplicationSourceHelmApplyConfiguration {
	b.Values = &value
	return b
}

// WithFileParameters adds the given value to the FileParameters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FileParameters field.
func (b *ApplicationSourceHelmApplyConfiguration) WithFileParameters(values ...*HelmFileParameterApplyConfiguration) *ApplicationSourceHelmApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFileParameters")
		}
		b.FileParameters = append(b.FileParameters, *values[i])
	}
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *ApplicationSourceHelmApplyConfiguration) WithVersion(value string) *ApplicationSourceHelmApplyConfiguration {
	b.Version = &value
	return b
}

// WithPassCredentials sets the PassCredentials field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PassCredentials field is set to the value of the last call.
func (b *ApplicationSourceHelmApplyConfiguration) WithPassCredentials(value bool) *ApplicationSourceHelmApplyConfiguration {
	b.PassCredentials = &value
	return b
}

// WithIgnoreMissingValueFiles sets the IgnoreMissingValueFiles field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IgnoreMissingValueFiles field is set to the value of the last call.
func (b *ApplicationSourceHelmApplyConfiguration) WithIgnoreMissingValueFiles(value bool) *ApplicationSourceHelmApplyConfiguration {
	b.IgnoreMissingValueFiles = &value
	return b
}

// WithSkipCrds sets the SkipCrds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SkipCrds field is set to the value of the last call.
func (b *ApplicationSourceHelmApplyConfiguration) WithSkipCrds(value bool) *ApplicationSourceHelmApplyConfiguration {
	b.SkipCrds = &value
	return b
}

// WithValuesObject sets the ValuesObject field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ValuesObject field is set to the value of the last call.
func (b *ApplicationSourceHelmApplyConfiguration) WithValuesObject(value runtime.RawExtension) *ApplicationSourceHelmApplyConfiguration {
	b.ValuesObject = &value
	return b
}
