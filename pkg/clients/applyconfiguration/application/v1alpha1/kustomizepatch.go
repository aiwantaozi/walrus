// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// KustomizePatchApplyConfiguration represents an declarative configuration of the KustomizePatch type for use
// with apply.
type KustomizePatchApplyConfiguration struct {
	Path    *string                              `json:"path,omitempty"`
	Patch   *string                              `json:"patch,omitempty"`
	Target  *KustomizeSelectorApplyConfiguration `json:"target,omitempty"`
	Options map[string]bool                      `json:"options,omitempty"`
}

// KustomizePatchApplyConfiguration constructs an declarative configuration of the KustomizePatch type for use with
// apply.
func KustomizePatch() *KustomizePatchApplyConfiguration {
	return &KustomizePatchApplyConfiguration{}
}

// WithPath sets the Path field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Path field is set to the value of the last call.
func (b *KustomizePatchApplyConfiguration) WithPath(value string) *KustomizePatchApplyConfiguration {
	b.Path = &value
	return b
}

// WithPatch sets the Patch field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Patch field is set to the value of the last call.
func (b *KustomizePatchApplyConfiguration) WithPatch(value string) *KustomizePatchApplyConfiguration {
	b.Patch = &value
	return b
}

// WithTarget sets the Target field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Target field is set to the value of the last call.
func (b *KustomizePatchApplyConfiguration) WithTarget(value *KustomizeSelectorApplyConfiguration) *KustomizePatchApplyConfiguration {
	b.Target = value
	return b
}

// WithOptions puts the entries into the Options field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Options field,
// overwriting an existing map entries in Options field with the same key.
func (b *KustomizePatchApplyConfiguration) WithOptions(entries map[string]bool) *KustomizePatchApplyConfiguration {
	if b.Options == nil && len(entries) > 0 {
		b.Options = make(map[string]bool, len(entries))
	}
	for k, v := range entries {
		b.Options[k] = v
	}
	return b
}
