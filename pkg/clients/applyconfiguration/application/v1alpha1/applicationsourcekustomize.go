// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
)

// ApplicationSourceKustomizeApplyConfiguration represents an declarative configuration of the ApplicationSourceKustomize type for use
// with apply.
type ApplicationSourceKustomizeApplyConfiguration struct {
	NamePrefix                *string                     `json:"namePrefix,omitempty"`
	NameSuffix                *string                     `json:"nameSuffix,omitempty"`
	Images                    *v1alpha1.KustomizeImages   `json:"images,omitempty"`
	CommonLabels              map[string]string           `json:"commonLabels,omitempty"`
	Version                   *string                     `json:"version,omitempty"`
	CommonAnnotations         map[string]string           `json:"commonAnnotations,omitempty"`
	ForceCommonLabels         *bool                       `json:"forceCommonLabels,omitempty"`
	ForceCommonAnnotations    *bool                       `json:"forceCommonAnnotations,omitempty"`
	Namespace                 *string                     `json:"namespace,omitempty"`
	CommonAnnotationsEnvsubst *bool                       `json:"commonAnnotationsEnvsubst,omitempty"`
	Replicas                  *v1alpha1.KustomizeReplicas `json:"replicas,omitempty"`
	Patches                   *v1alpha1.KustomizePatches  `json:"patches,omitempty"`
	Components                []string                    `json:"components,omitempty"`
}

// ApplicationSourceKustomizeApplyConfiguration constructs an declarative configuration of the ApplicationSourceKustomize type for use with
// apply.
func ApplicationSourceKustomize() *ApplicationSourceKustomizeApplyConfiguration {
	return &ApplicationSourceKustomizeApplyConfiguration{}
}

// WithNamePrefix sets the NamePrefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NamePrefix field is set to the value of the last call.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithNamePrefix(value string) *ApplicationSourceKustomizeApplyConfiguration {
	b.NamePrefix = &value
	return b
}

// WithNameSuffix sets the NameSuffix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NameSuffix field is set to the value of the last call.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithNameSuffix(value string) *ApplicationSourceKustomizeApplyConfiguration {
	b.NameSuffix = &value
	return b
}

// WithImages sets the Images field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Images field is set to the value of the last call.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithImages(value v1alpha1.KustomizeImages) *ApplicationSourceKustomizeApplyConfiguration {
	b.Images = &value
	return b
}

// WithCommonLabels puts the entries into the CommonLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the CommonLabels field,
// overwriting an existing map entries in CommonLabels field with the same key.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithCommonLabels(entries map[string]string) *ApplicationSourceKustomizeApplyConfiguration {
	if b.CommonLabels == nil && len(entries) > 0 {
		b.CommonLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.CommonLabels[k] = v
	}
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithVersion(value string) *ApplicationSourceKustomizeApplyConfiguration {
	b.Version = &value
	return b
}

// WithCommonAnnotations puts the entries into the CommonAnnotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the CommonAnnotations field,
// overwriting an existing map entries in CommonAnnotations field with the same key.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithCommonAnnotations(entries map[string]string) *ApplicationSourceKustomizeApplyConfiguration {
	if b.CommonAnnotations == nil && len(entries) > 0 {
		b.CommonAnnotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.CommonAnnotations[k] = v
	}
	return b
}

// WithForceCommonLabels sets the ForceCommonLabels field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ForceCommonLabels field is set to the value of the last call.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithForceCommonLabels(value bool) *ApplicationSourceKustomizeApplyConfiguration {
	b.ForceCommonLabels = &value
	return b
}

// WithForceCommonAnnotations sets the ForceCommonAnnotations field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ForceCommonAnnotations field is set to the value of the last call.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithForceCommonAnnotations(value bool) *ApplicationSourceKustomizeApplyConfiguration {
	b.ForceCommonAnnotations = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithNamespace(value string) *ApplicationSourceKustomizeApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithCommonAnnotationsEnvsubst sets the CommonAnnotationsEnvsubst field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CommonAnnotationsEnvsubst field is set to the value of the last call.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithCommonAnnotationsEnvsubst(value bool) *ApplicationSourceKustomizeApplyConfiguration {
	b.CommonAnnotationsEnvsubst = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithReplicas(value v1alpha1.KustomizeReplicas) *ApplicationSourceKustomizeApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithPatches sets the Patches field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Patches field is set to the value of the last call.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithPatches(value v1alpha1.KustomizePatches) *ApplicationSourceKustomizeApplyConfiguration {
	b.Patches = &value
	return b
}

// WithComponents adds the given value to the Components field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Components field.
func (b *ApplicationSourceKustomizeApplyConfiguration) WithComponents(values ...string) *ApplicationSourceKustomizeApplyConfiguration {
	for i := range values {
		b.Components = append(b.Components, values[i])
	}
	return b
}
