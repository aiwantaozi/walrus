// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	applicationv1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ApplicationStatusApplyConfiguration represents an declarative configuration of the ApplicationStatus type for use
// with apply.
type ApplicationStatusApplyConfiguration struct {
	Resources            []ResourceStatusApplyConfiguration          `json:"resources,omitempty"`
	Sync                 *SyncStatusApplyConfiguration               `json:"sync,omitempty"`
	Health               *HealthStatusApplyConfiguration             `json:"health,omitempty"`
	History              *applicationv1alpha1.RevisionHistories      `json:"history,omitempty"`
	Conditions           []ApplicationConditionApplyConfiguration    `json:"conditions,omitempty"`
	ReconciledAt         *v1.Time                                    `json:"reconciledAt,omitempty"`
	OperationState       *OperationStateApplyConfiguration           `json:"operationState,omitempty"`
	ObservedAt           *v1.Time                                    `json:"observedAt,omitempty"`
	SourceType           *applicationv1alpha1.ApplicationSourceType  `json:"sourceType,omitempty"`
	Summary              *ApplicationSummaryApplyConfiguration       `json:"summary,omitempty"`
	ResourceHealthSource *applicationv1alpha1.ResourceHealthLocation `json:"resourceHealthSource,omitempty"`
	SourceTypes          []applicationv1alpha1.ApplicationSourceType `json:"sourceTypes,omitempty"`
	ControllerNamespace  *string                                     `json:"controllerNamespace,omitempty"`
}

// ApplicationStatusApplyConfiguration constructs an declarative configuration of the ApplicationStatus type for use with
// apply.
func ApplicationStatus() *ApplicationStatusApplyConfiguration {
	return &ApplicationStatusApplyConfiguration{}
}

// WithResources adds the given value to the Resources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Resources field.
func (b *ApplicationStatusApplyConfiguration) WithResources(values ...*ResourceStatusApplyConfiguration) *ApplicationStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithResources")
		}
		b.Resources = append(b.Resources, *values[i])
	}
	return b
}

// WithSync sets the Sync field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Sync field is set to the value of the last call.
func (b *ApplicationStatusApplyConfiguration) WithSync(value *SyncStatusApplyConfiguration) *ApplicationStatusApplyConfiguration {
	b.Sync = value
	return b
}

// WithHealth sets the Health field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Health field is set to the value of the last call.
func (b *ApplicationStatusApplyConfiguration) WithHealth(value *HealthStatusApplyConfiguration) *ApplicationStatusApplyConfiguration {
	b.Health = value
	return b
}

// WithHistory sets the History field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the History field is set to the value of the last call.
func (b *ApplicationStatusApplyConfiguration) WithHistory(value applicationv1alpha1.RevisionHistories) *ApplicationStatusApplyConfiguration {
	b.History = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *ApplicationStatusApplyConfiguration) WithConditions(values ...*ApplicationConditionApplyConfiguration) *ApplicationStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithReconciledAt sets the ReconciledAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReconciledAt field is set to the value of the last call.
func (b *ApplicationStatusApplyConfiguration) WithReconciledAt(value v1.Time) *ApplicationStatusApplyConfiguration {
	b.ReconciledAt = &value
	return b
}

// WithOperationState sets the OperationState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OperationState field is set to the value of the last call.
func (b *ApplicationStatusApplyConfiguration) WithOperationState(value *OperationStateApplyConfiguration) *ApplicationStatusApplyConfiguration {
	b.OperationState = value
	return b
}

// WithObservedAt sets the ObservedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedAt field is set to the value of the last call.
func (b *ApplicationStatusApplyConfiguration) WithObservedAt(value v1.Time) *ApplicationStatusApplyConfiguration {
	b.ObservedAt = &value
	return b
}

// WithSourceType sets the SourceType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SourceType field is set to the value of the last call.
func (b *ApplicationStatusApplyConfiguration) WithSourceType(value applicationv1alpha1.ApplicationSourceType) *ApplicationStatusApplyConfiguration {
	b.SourceType = &value
	return b
}

// WithSummary sets the Summary field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Summary field is set to the value of the last call.
func (b *ApplicationStatusApplyConfiguration) WithSummary(value *ApplicationSummaryApplyConfiguration) *ApplicationStatusApplyConfiguration {
	b.Summary = value
	return b
}

// WithResourceHealthSource sets the ResourceHealthSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceHealthSource field is set to the value of the last call.
func (b *ApplicationStatusApplyConfiguration) WithResourceHealthSource(value applicationv1alpha1.ResourceHealthLocation) *ApplicationStatusApplyConfiguration {
	b.ResourceHealthSource = &value
	return b
}

// WithSourceTypes adds the given value to the SourceTypes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SourceTypes field.
func (b *ApplicationStatusApplyConfiguration) WithSourceTypes(values ...applicationv1alpha1.ApplicationSourceType) *ApplicationStatusApplyConfiguration {
	for i := range values {
		b.SourceTypes = append(b.SourceTypes, values[i])
	}
	return b
}

// WithControllerNamespace sets the ControllerNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ControllerNamespace field is set to the value of the last call.
func (b *ApplicationStatusApplyConfiguration) WithControllerNamespace(value string) *ApplicationStatusApplyConfiguration {
	b.ControllerNamespace = &value
	return b
}
