// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

// ApplicationMatchExpressionApplyConfiguration represents an declarative configuration of the ApplicationMatchExpression type for use
// with apply.
type ApplicationMatchExpressionApplyConfiguration struct {
	Key      *string  `json:"key,omitempty"`
	Operator *string  `json:"operator,omitempty"`
	Values   []string `json:"values,omitempty"`
}

// ApplicationMatchExpressionApplyConfiguration constructs an declarative configuration of the ApplicationMatchExpression type for use with
// apply.
func ApplicationMatchExpression() *ApplicationMatchExpressionApplyConfiguration {
	return &ApplicationMatchExpressionApplyConfiguration{}
}

// WithKey sets the Key field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Key field is set to the value of the last call.
func (b *ApplicationMatchExpressionApplyConfiguration) WithKey(value string) *ApplicationMatchExpressionApplyConfiguration {
	b.Key = &value
	return b
}

// WithOperator sets the Operator field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Operator field is set to the value of the last call.
func (b *ApplicationMatchExpressionApplyConfiguration) WithOperator(value string) *ApplicationMatchExpressionApplyConfiguration {
	b.Operator = &value
	return b
}

// WithValues adds the given value to the Values field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Values field.
func (b *ApplicationMatchExpressionApplyConfiguration) WithValues(values ...string) *ApplicationMatchExpressionApplyConfiguration {
	for i := range values {
		b.Values = append(b.Values, values[i])
	}
	return b
}
