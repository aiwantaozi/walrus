// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// ClusterGeneratorApplyConfiguration represents an declarative configuration of the ClusterGenerator type for use
// with apply.
type ClusterGeneratorApplyConfiguration struct {
	Selector *v1.LabelSelectorApplyConfiguration       `json:"selector,omitempty"`
	Template *ApplicationSetTemplateApplyConfiguration `json:"template,omitempty"`
	Values   map[string]string                         `json:"values,omitempty"`
}

// ClusterGeneratorApplyConfiguration constructs an declarative configuration of the ClusterGenerator type for use with
// apply.
func ClusterGenerator() *ClusterGeneratorApplyConfiguration {
	return &ClusterGeneratorApplyConfiguration{}
}

// WithSelector sets the Selector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Selector field is set to the value of the last call.
func (b *ClusterGeneratorApplyConfiguration) WithSelector(value *v1.LabelSelectorApplyConfiguration) *ClusterGeneratorApplyConfiguration {
	b.Selector = value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *ClusterGeneratorApplyConfiguration) WithTemplate(value *ApplicationSetTemplateApplyConfiguration) *ClusterGeneratorApplyConfiguration {
	b.Template = value
	return b
}

// WithValues puts the entries into the Values field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Values field,
// overwriting an existing map entries in Values field with the same key.
func (b *ClusterGeneratorApplyConfiguration) WithValues(entries map[string]string) *ClusterGeneratorApplyConfiguration {
	if b.Values == nil && len(entries) > 0 {
		b.Values = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Values[k] = v
	}
	return b
}
