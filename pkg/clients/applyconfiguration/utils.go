// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package applyconfiguration

import (
	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	walrusv1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
	walruscorev1 "github.com/seal-io/walrus/pkg/apis/walruscore/v1"
	admissionregistrationv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/admissionregistration/v1"
	applyconfigurationapiextensionsv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/apiextensions/v1"
	applyconfigurationapiregistrationv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/apiregistration/v1"
	applyconfigurationappsv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/apps/v1"
	applyconfigurationautoscalingv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/autoscaling/v1"
	autoscalingv2 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/autoscaling/v2"
	applyconfigurationbatchv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/batch/v1"
	applyconfigurationcertificatesv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/certificates/v1"
	applyconfigurationcoordinationv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/coordination/v1"
	applyconfigurationcorev1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/core/v1"
	applyconfigurationdiscoveryv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/discovery/v1"
	applyconfigurationeventsv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/events/v1"
	applyconfigurationrbacv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/rbac/v1"
	applyconfigurationschedulingv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/scheduling/v1"
	applyconfigurationstoragev1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/storage/v1"
	applyconfigurationwalrusv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/walrus/v1"
	applyconfigurationwalruscorev1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/walruscore/v1"
	workflowv1alpha1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/workflow/v1alpha1"
	v1 "k8s.io/api/admissionregistration/v1"
	appsv1 "k8s.io/api/apps/v1"
	autoscalingv1 "k8s.io/api/autoscaling/v1"
	v2 "k8s.io/api/autoscaling/v2"
	batchv1 "k8s.io/api/batch/v1"
	certificatesv1 "k8s.io/api/certificates/v1"
	coordinationv1 "k8s.io/api/coordination/v1"
	corev1 "k8s.io/api/core/v1"
	discoveryv1 "k8s.io/api/discovery/v1"
	eventsv1 "k8s.io/api/events/v1"
	rbacv1 "k8s.io/api/rbac/v1"
	schedulingv1 "k8s.io/api/scheduling/v1"
	storagev1 "k8s.io/api/storage/v1"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	apiregistrationv1 "k8s.io/kube-aggregator/pkg/apis/apiregistration/v1"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=admissionregistration.k8s.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("MatchCondition"):
		return &admissionregistrationv1.MatchConditionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("MutatingWebhook"):
		return &admissionregistrationv1.MutatingWebhookApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("MutatingWebhookConfiguration"):
		return &admissionregistrationv1.MutatingWebhookConfigurationApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("Rule"):
		return &admissionregistrationv1.RuleApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("RuleWithOperations"):
		return &admissionregistrationv1.RuleWithOperationsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ServiceReference"):
		return &admissionregistrationv1.ServiceReferenceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ValidatingWebhook"):
		return &admissionregistrationv1.ValidatingWebhookApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ValidatingWebhookConfiguration"):
		return &admissionregistrationv1.ValidatingWebhookConfigurationApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("WebhookClientConfig"):
		return &admissionregistrationv1.WebhookClientConfigApplyConfiguration{}

		// Group=apiextensions.k8s.io, Version=v1
	case apiextensionsv1.SchemeGroupVersion.WithKind("CustomResourceColumnDefinition"):
		return &applyconfigurationapiextensionsv1.CustomResourceColumnDefinitionApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("CustomResourceConversion"):
		return &applyconfigurationapiextensionsv1.CustomResourceConversionApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("CustomResourceDefinition"):
		return &applyconfigurationapiextensionsv1.CustomResourceDefinitionApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("CustomResourceDefinitionCondition"):
		return &applyconfigurationapiextensionsv1.CustomResourceDefinitionConditionApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("CustomResourceDefinitionNames"):
		return &applyconfigurationapiextensionsv1.CustomResourceDefinitionNamesApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("CustomResourceDefinitionSpec"):
		return &applyconfigurationapiextensionsv1.CustomResourceDefinitionSpecApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("CustomResourceDefinitionStatus"):
		return &applyconfigurationapiextensionsv1.CustomResourceDefinitionStatusApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("CustomResourceDefinitionVersion"):
		return &applyconfigurationapiextensionsv1.CustomResourceDefinitionVersionApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("CustomResourceSubresources"):
		return &applyconfigurationapiextensionsv1.CustomResourceSubresourcesApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("CustomResourceSubresourceScale"):
		return &applyconfigurationapiextensionsv1.CustomResourceSubresourceScaleApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("CustomResourceValidation"):
		return &applyconfigurationapiextensionsv1.CustomResourceValidationApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("ExternalDocumentation"):
		return &applyconfigurationapiextensionsv1.ExternalDocumentationApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("JSONSchemaProps"):
		return &applyconfigurationapiextensionsv1.JSONSchemaPropsApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("ServiceReference"):
		return &applyconfigurationapiextensionsv1.ServiceReferenceApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("ValidationRule"):
		return &applyconfigurationapiextensionsv1.ValidationRuleApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("WebhookClientConfig"):
		return &applyconfigurationapiextensionsv1.WebhookClientConfigApplyConfiguration{}
	case apiextensionsv1.SchemeGroupVersion.WithKind("WebhookConversion"):
		return &applyconfigurationapiextensionsv1.WebhookConversionApplyConfiguration{}

		// Group=apiregistration.k8s.io, Version=v1
	case apiregistrationv1.SchemeGroupVersion.WithKind("APIService"):
		return &applyconfigurationapiregistrationv1.APIServiceApplyConfiguration{}
	case apiregistrationv1.SchemeGroupVersion.WithKind("APIServiceCondition"):
		return &applyconfigurationapiregistrationv1.APIServiceConditionApplyConfiguration{}
	case apiregistrationv1.SchemeGroupVersion.WithKind("APIServiceSpec"):
		return &applyconfigurationapiregistrationv1.APIServiceSpecApplyConfiguration{}
	case apiregistrationv1.SchemeGroupVersion.WithKind("APIServiceStatus"):
		return &applyconfigurationapiregistrationv1.APIServiceStatusApplyConfiguration{}
	case apiregistrationv1.SchemeGroupVersion.WithKind("ServiceReference"):
		return &applyconfigurationapiregistrationv1.ServiceReferenceApplyConfiguration{}

		// Group=apps, Version=v1
	case appsv1.SchemeGroupVersion.WithKind("ControllerRevision"):
		return &applyconfigurationappsv1.ControllerRevisionApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("DaemonSet"):
		return &applyconfigurationappsv1.DaemonSetApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("DaemonSetCondition"):
		return &applyconfigurationappsv1.DaemonSetConditionApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("DaemonSetSpec"):
		return &applyconfigurationappsv1.DaemonSetSpecApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("DaemonSetStatus"):
		return &applyconfigurationappsv1.DaemonSetStatusApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("DaemonSetUpdateStrategy"):
		return &applyconfigurationappsv1.DaemonSetUpdateStrategyApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("Deployment"):
		return &applyconfigurationappsv1.DeploymentApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("DeploymentCondition"):
		return &applyconfigurationappsv1.DeploymentConditionApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("DeploymentSpec"):
		return &applyconfigurationappsv1.DeploymentSpecApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("DeploymentStatus"):
		return &applyconfigurationappsv1.DeploymentStatusApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("DeploymentStrategy"):
		return &applyconfigurationappsv1.DeploymentStrategyApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("ReplicaSet"):
		return &applyconfigurationappsv1.ReplicaSetApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("ReplicaSetCondition"):
		return &applyconfigurationappsv1.ReplicaSetConditionApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("ReplicaSetSpec"):
		return &applyconfigurationappsv1.ReplicaSetSpecApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("ReplicaSetStatus"):
		return &applyconfigurationappsv1.ReplicaSetStatusApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("RollingUpdateDaemonSet"):
		return &applyconfigurationappsv1.RollingUpdateDaemonSetApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("RollingUpdateDeployment"):
		return &applyconfigurationappsv1.RollingUpdateDeploymentApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("RollingUpdateStatefulSetStrategy"):
		return &applyconfigurationappsv1.RollingUpdateStatefulSetStrategyApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("StatefulSet"):
		return &applyconfigurationappsv1.StatefulSetApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("StatefulSetCondition"):
		return &applyconfigurationappsv1.StatefulSetConditionApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("StatefulSetOrdinals"):
		return &applyconfigurationappsv1.StatefulSetOrdinalsApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("StatefulSetPersistentVolumeClaimRetentionPolicy"):
		return &applyconfigurationappsv1.StatefulSetPersistentVolumeClaimRetentionPolicyApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("StatefulSetSpec"):
		return &applyconfigurationappsv1.StatefulSetSpecApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("StatefulSetStatus"):
		return &applyconfigurationappsv1.StatefulSetStatusApplyConfiguration{}
	case appsv1.SchemeGroupVersion.WithKind("StatefulSetUpdateStrategy"):
		return &applyconfigurationappsv1.StatefulSetUpdateStrategyApplyConfiguration{}

		// Group=argoproj.io, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("ArchiveStrategy"):
		return &workflowv1alpha1.ArchiveStrategyApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Arguments"):
		return &workflowv1alpha1.ArgumentsApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtGCStatus"):
		return &workflowv1alpha1.ArtGCStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Artifact"):
		return &workflowv1alpha1.ArtifactApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactGC"):
		return &workflowv1alpha1.ArtifactGCApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactGCSpec"):
		return &workflowv1alpha1.ArtifactGCSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactGCStatus"):
		return &workflowv1alpha1.ArtifactGCStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactLocation"):
		return &workflowv1alpha1.ArtifactLocationApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactNodeSpec"):
		return &workflowv1alpha1.ArtifactNodeSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactoryArtifact"):
		return &workflowv1alpha1.ArtifactoryArtifactApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactoryArtifactRepository"):
		return &workflowv1alpha1.ArtifactoryArtifactRepositoryApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactoryAuth"):
		return &workflowv1alpha1.ArtifactoryAuthApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactPaths"):
		return &workflowv1alpha1.ArtifactPathsApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactRepository"):
		return &workflowv1alpha1.ArtifactRepositoryApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactRepositoryRef"):
		return &workflowv1alpha1.ArtifactRepositoryRefApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactRepositoryRefStatus"):
		return &workflowv1alpha1.ArtifactRepositoryRefStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactResult"):
		return &workflowv1alpha1.ArtifactResultApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ArtifactResultNodeStatus"):
		return &workflowv1alpha1.ArtifactResultNodeStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("AzureArtifact"):
		return &workflowv1alpha1.AzureArtifactApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("AzureArtifactRepository"):
		return &workflowv1alpha1.AzureArtifactRepositoryApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("AzureBlobContainer"):
		return &workflowv1alpha1.AzureBlobContainerApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Backoff"):
		return &workflowv1alpha1.BackoffApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("BasicAuth"):
		return &workflowv1alpha1.BasicAuthApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Cache"):
		return &workflowv1alpha1.CacheApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ClientCertAuth"):
		return &workflowv1alpha1.ClientCertAuthApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ClusterWorkflowTemplate"):
		return &workflowv1alpha1.ClusterWorkflowTemplateApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Condition"):
		return &workflowv1alpha1.ConditionApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ContainerNode"):
		return &workflowv1alpha1.ContainerNodeApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ContainerSetRetryStrategy"):
		return &workflowv1alpha1.ContainerSetRetryStrategyApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ContainerSetTemplate"):
		return &workflowv1alpha1.ContainerSetTemplateApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ContinueOn"):
		return &workflowv1alpha1.ContinueOnApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Counter"):
		return &workflowv1alpha1.CounterApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("CreateS3BucketOptions"):
		return &workflowv1alpha1.CreateS3BucketOptionsApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("CronWorkflow"):
		return &workflowv1alpha1.CronWorkflowApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("CronWorkflowSpec"):
		return &workflowv1alpha1.CronWorkflowSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("CronWorkflowStatus"):
		return &workflowv1alpha1.CronWorkflowStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("DAGTask"):
		return &workflowv1alpha1.DAGTaskApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("DAGTemplate"):
		return &workflowv1alpha1.DAGTemplateApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Data"):
		return &workflowv1alpha1.DataApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("DataSource"):
		return &workflowv1alpha1.DataSourceApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Event"):
		return &workflowv1alpha1.EventApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ExecutorConfig"):
		return &workflowv1alpha1.ExecutorConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Gauge"):
		return &workflowv1alpha1.GaugeApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("GCSArtifact"):
		return &workflowv1alpha1.GCSArtifactApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("GCSArtifactRepository"):
		return &workflowv1alpha1.GCSArtifactRepositoryApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("GCSBucket"):
		return &workflowv1alpha1.GCSBucketApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("GitArtifact"):
		return &workflowv1alpha1.GitArtifactApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HDFSArtifact"):
		return &workflowv1alpha1.HDFSArtifactApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HDFSArtifactRepository"):
		return &workflowv1alpha1.HDFSArtifactRepositoryApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HDFSConfig"):
		return &workflowv1alpha1.HDFSConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HDFSKrbConfig"):
		return &workflowv1alpha1.HDFSKrbConfigApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Header"):
		return &workflowv1alpha1.HeaderApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Histogram"):
		return &workflowv1alpha1.HistogramApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HTTP"):
		return &workflowv1alpha1.HTTPApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HTTPArtifact"):
		return &workflowv1alpha1.HTTPArtifactApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HTTPAuth"):
		return &workflowv1alpha1.HTTPAuthApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HTTPBodySource"):
		return &workflowv1alpha1.HTTPBodySourceApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HTTPHeader"):
		return &workflowv1alpha1.HTTPHeaderApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("HTTPHeaderSource"):
		return &workflowv1alpha1.HTTPHeaderSourceApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Inputs"):
		return &workflowv1alpha1.InputsApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("LabelValueFrom"):
		return &workflowv1alpha1.LabelValueFromApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("LifecycleHook"):
		return &workflowv1alpha1.LifecycleHookApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ManifestFrom"):
		return &workflowv1alpha1.ManifestFromApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MemoizationStatus"):
		return &workflowv1alpha1.MemoizationStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Memoize"):
		return &workflowv1alpha1.MemoizeApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Metadata"):
		return &workflowv1alpha1.MetadataApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MetricLabel"):
		return &workflowv1alpha1.MetricLabelApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Metrics"):
		return &workflowv1alpha1.MetricsApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Mutex"):
		return &workflowv1alpha1.MutexApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MutexHolding"):
		return &workflowv1alpha1.MutexHoldingApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MutexStatus"):
		return &workflowv1alpha1.MutexStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NodeFlag"):
		return &workflowv1alpha1.NodeFlagApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NodeResult"):
		return &workflowv1alpha1.NodeResultApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NodeStatus"):
		return &workflowv1alpha1.NodeStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NodeSynchronizationStatus"):
		return &workflowv1alpha1.NodeSynchronizationStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("OAuth2Auth"):
		return &workflowv1alpha1.OAuth2AuthApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("OAuth2EndpointParam"):
		return &workflowv1alpha1.OAuth2EndpointParamApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("OSSArtifact"):
		return &workflowv1alpha1.OSSArtifactApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("OSSArtifactRepository"):
		return &workflowv1alpha1.OSSArtifactRepositoryApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("OSSBucket"):
		return &workflowv1alpha1.OSSBucketApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("OSSLifecycleRule"):
		return &workflowv1alpha1.OSSLifecycleRuleApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Outputs"):
		return &workflowv1alpha1.OutputsApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Parameter"):
		return &workflowv1alpha1.ParameterApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Plugin"):
		return &workflowv1alpha1.PluginApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("PodGC"):
		return &workflowv1alpha1.PodGCApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Prometheus"):
		return &workflowv1alpha1.PrometheusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("RawArtifact"):
		return &workflowv1alpha1.RawArtifactApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ResourceTemplate"):
		return &workflowv1alpha1.ResourceTemplateApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("RetryAffinity"):
		return &workflowv1alpha1.RetryAffinityApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("RetryStrategy"):
		return &workflowv1alpha1.RetryStrategyApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("S3Artifact"):
		return &workflowv1alpha1.S3ArtifactApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("S3ArtifactRepository"):
		return &workflowv1alpha1.S3ArtifactRepositoryApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("S3Bucket"):
		return &workflowv1alpha1.S3BucketApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("S3EncryptionOptions"):
		return &workflowv1alpha1.S3EncryptionOptionsApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ScriptTemplate"):
		return &workflowv1alpha1.ScriptTemplateApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("SemaphoreHolding"):
		return &workflowv1alpha1.SemaphoreHoldingApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("SemaphoreRef"):
		return &workflowv1alpha1.SemaphoreRefApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("SemaphoreStatus"):
		return &workflowv1alpha1.SemaphoreStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Sequence"):
		return &workflowv1alpha1.SequenceApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Submit"):
		return &workflowv1alpha1.SubmitApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("SuspendTemplate"):
		return &workflowv1alpha1.SuspendTemplateApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Synchronization"):
		return &workflowv1alpha1.SynchronizationApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("SynchronizationStatus"):
		return &workflowv1alpha1.SynchronizationStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("TarStrategy"):
		return &workflowv1alpha1.TarStrategyApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Template"):
		return &workflowv1alpha1.TemplateApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("TemplateRef"):
		return &workflowv1alpha1.TemplateRefApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("TransformationStep"):
		return &workflowv1alpha1.TransformationStepApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("TTLStrategy"):
		return &workflowv1alpha1.TTLStrategyApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("UserContainer"):
		return &workflowv1alpha1.UserContainerApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ValueFrom"):
		return &workflowv1alpha1.ValueFromApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("VolumeClaimGC"):
		return &workflowv1alpha1.VolumeClaimGCApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Workflow"):
		return &workflowv1alpha1.WorkflowApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowArtifactGCTask"):
		return &workflowv1alpha1.WorkflowArtifactGCTaskApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowEventBinding"):
		return &workflowv1alpha1.WorkflowEventBindingApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowEventBindingSpec"):
		return &workflowv1alpha1.WorkflowEventBindingSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowLevelArtifactGC"):
		return &workflowv1alpha1.WorkflowLevelArtifactGCApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowMetadata"):
		return &workflowv1alpha1.WorkflowMetadataApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowSpec"):
		return &workflowv1alpha1.WorkflowSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowStatus"):
		return &workflowv1alpha1.WorkflowStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowStep"):
		return &workflowv1alpha1.WorkflowStepApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowTaskResult"):
		return &workflowv1alpha1.WorkflowTaskResultApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowTaskSet"):
		return &workflowv1alpha1.WorkflowTaskSetApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowTaskSetSpec"):
		return &workflowv1alpha1.WorkflowTaskSetSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowTaskSetStatus"):
		return &workflowv1alpha1.WorkflowTaskSetStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowTemplate"):
		return &workflowv1alpha1.WorkflowTemplateApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("WorkflowTemplateRef"):
		return &workflowv1alpha1.WorkflowTemplateRefApplyConfiguration{}

		// Group=autoscaling, Version=v1
	case autoscalingv1.SchemeGroupVersion.WithKind("CrossVersionObjectReference"):
		return &applyconfigurationautoscalingv1.CrossVersionObjectReferenceApplyConfiguration{}
	case autoscalingv1.SchemeGroupVersion.WithKind("HorizontalPodAutoscaler"):
		return &applyconfigurationautoscalingv1.HorizontalPodAutoscalerApplyConfiguration{}
	case autoscalingv1.SchemeGroupVersion.WithKind("HorizontalPodAutoscalerSpec"):
		return &applyconfigurationautoscalingv1.HorizontalPodAutoscalerSpecApplyConfiguration{}
	case autoscalingv1.SchemeGroupVersion.WithKind("HorizontalPodAutoscalerStatus"):
		return &applyconfigurationautoscalingv1.HorizontalPodAutoscalerStatusApplyConfiguration{}
	case autoscalingv1.SchemeGroupVersion.WithKind("Scale"):
		return &applyconfigurationautoscalingv1.ScaleApplyConfiguration{}
	case autoscalingv1.SchemeGroupVersion.WithKind("ScaleSpec"):
		return &applyconfigurationautoscalingv1.ScaleSpecApplyConfiguration{}
	case autoscalingv1.SchemeGroupVersion.WithKind("ScaleStatus"):
		return &applyconfigurationautoscalingv1.ScaleStatusApplyConfiguration{}

		// Group=autoscaling, Version=v2
	case v2.SchemeGroupVersion.WithKind("ContainerResourceMetricSource"):
		return &autoscalingv2.ContainerResourceMetricSourceApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("ContainerResourceMetricStatus"):
		return &autoscalingv2.ContainerResourceMetricStatusApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("CrossVersionObjectReference"):
		return &autoscalingv2.CrossVersionObjectReferenceApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("ExternalMetricSource"):
		return &autoscalingv2.ExternalMetricSourceApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("ExternalMetricStatus"):
		return &autoscalingv2.ExternalMetricStatusApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("HorizontalPodAutoscaler"):
		return &autoscalingv2.HorizontalPodAutoscalerApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("HorizontalPodAutoscalerBehavior"):
		return &autoscalingv2.HorizontalPodAutoscalerBehaviorApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("HorizontalPodAutoscalerCondition"):
		return &autoscalingv2.HorizontalPodAutoscalerConditionApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("HorizontalPodAutoscalerSpec"):
		return &autoscalingv2.HorizontalPodAutoscalerSpecApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("HorizontalPodAutoscalerStatus"):
		return &autoscalingv2.HorizontalPodAutoscalerStatusApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("HPAScalingPolicy"):
		return &autoscalingv2.HPAScalingPolicyApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("HPAScalingRules"):
		return &autoscalingv2.HPAScalingRulesApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("MetricIdentifier"):
		return &autoscalingv2.MetricIdentifierApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("MetricSpec"):
		return &autoscalingv2.MetricSpecApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("MetricStatus"):
		return &autoscalingv2.MetricStatusApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("MetricTarget"):
		return &autoscalingv2.MetricTargetApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("MetricValueStatus"):
		return &autoscalingv2.MetricValueStatusApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("ObjectMetricSource"):
		return &autoscalingv2.ObjectMetricSourceApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("ObjectMetricStatus"):
		return &autoscalingv2.ObjectMetricStatusApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("PodsMetricSource"):
		return &autoscalingv2.PodsMetricSourceApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("PodsMetricStatus"):
		return &autoscalingv2.PodsMetricStatusApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("ResourceMetricSource"):
		return &autoscalingv2.ResourceMetricSourceApplyConfiguration{}
	case v2.SchemeGroupVersion.WithKind("ResourceMetricStatus"):
		return &autoscalingv2.ResourceMetricStatusApplyConfiguration{}

		// Group=batch, Version=v1
	case batchv1.SchemeGroupVersion.WithKind("CronJob"):
		return &applyconfigurationbatchv1.CronJobApplyConfiguration{}
	case batchv1.SchemeGroupVersion.WithKind("CronJobSpec"):
		return &applyconfigurationbatchv1.CronJobSpecApplyConfiguration{}
	case batchv1.SchemeGroupVersion.WithKind("CronJobStatus"):
		return &applyconfigurationbatchv1.CronJobStatusApplyConfiguration{}
	case batchv1.SchemeGroupVersion.WithKind("Job"):
		return &applyconfigurationbatchv1.JobApplyConfiguration{}
	case batchv1.SchemeGroupVersion.WithKind("JobCondition"):
		return &applyconfigurationbatchv1.JobConditionApplyConfiguration{}
	case batchv1.SchemeGroupVersion.WithKind("JobSpec"):
		return &applyconfigurationbatchv1.JobSpecApplyConfiguration{}
	case batchv1.SchemeGroupVersion.WithKind("JobStatus"):
		return &applyconfigurationbatchv1.JobStatusApplyConfiguration{}
	case batchv1.SchemeGroupVersion.WithKind("JobTemplateSpec"):
		return &applyconfigurationbatchv1.JobTemplateSpecApplyConfiguration{}
	case batchv1.SchemeGroupVersion.WithKind("PodFailurePolicy"):
		return &applyconfigurationbatchv1.PodFailurePolicyApplyConfiguration{}
	case batchv1.SchemeGroupVersion.WithKind("PodFailurePolicyOnExitCodesRequirement"):
		return &applyconfigurationbatchv1.PodFailurePolicyOnExitCodesRequirementApplyConfiguration{}
	case batchv1.SchemeGroupVersion.WithKind("PodFailurePolicyOnPodConditionsPattern"):
		return &applyconfigurationbatchv1.PodFailurePolicyOnPodConditionsPatternApplyConfiguration{}
	case batchv1.SchemeGroupVersion.WithKind("PodFailurePolicyRule"):
		return &applyconfigurationbatchv1.PodFailurePolicyRuleApplyConfiguration{}
	case batchv1.SchemeGroupVersion.WithKind("UncountedTerminatedPods"):
		return &applyconfigurationbatchv1.UncountedTerminatedPodsApplyConfiguration{}

		// Group=certificates.k8s.io, Version=v1
	case certificatesv1.SchemeGroupVersion.WithKind("CertificateSigningRequest"):
		return &applyconfigurationcertificatesv1.CertificateSigningRequestApplyConfiguration{}
	case certificatesv1.SchemeGroupVersion.WithKind("CertificateSigningRequestCondition"):
		return &applyconfigurationcertificatesv1.CertificateSigningRequestConditionApplyConfiguration{}
	case certificatesv1.SchemeGroupVersion.WithKind("CertificateSigningRequestSpec"):
		return &applyconfigurationcertificatesv1.CertificateSigningRequestSpecApplyConfiguration{}
	case certificatesv1.SchemeGroupVersion.WithKind("CertificateSigningRequestStatus"):
		return &applyconfigurationcertificatesv1.CertificateSigningRequestStatusApplyConfiguration{}

		// Group=coordination.k8s.io, Version=v1
	case coordinationv1.SchemeGroupVersion.WithKind("Lease"):
		return &applyconfigurationcoordinationv1.LeaseApplyConfiguration{}
	case coordinationv1.SchemeGroupVersion.WithKind("LeaseSpec"):
		return &applyconfigurationcoordinationv1.LeaseSpecApplyConfiguration{}

		// Group=core, Version=v1
	case corev1.SchemeGroupVersion.WithKind("Affinity"):
		return &applyconfigurationcorev1.AffinityApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("AttachedVolume"):
		return &applyconfigurationcorev1.AttachedVolumeApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("AWSElasticBlockStoreVolumeSource"):
		return &applyconfigurationcorev1.AWSElasticBlockStoreVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("AzureDiskVolumeSource"):
		return &applyconfigurationcorev1.AzureDiskVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("AzureFilePersistentVolumeSource"):
		return &applyconfigurationcorev1.AzureFilePersistentVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("AzureFileVolumeSource"):
		return &applyconfigurationcorev1.AzureFileVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Capabilities"):
		return &applyconfigurationcorev1.CapabilitiesApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("CephFSPersistentVolumeSource"):
		return &applyconfigurationcorev1.CephFSPersistentVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("CephFSVolumeSource"):
		return &applyconfigurationcorev1.CephFSVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("CinderPersistentVolumeSource"):
		return &applyconfigurationcorev1.CinderPersistentVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("CinderVolumeSource"):
		return &applyconfigurationcorev1.CinderVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ClaimSource"):
		return &applyconfigurationcorev1.ClaimSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ClientIPConfig"):
		return &applyconfigurationcorev1.ClientIPConfigApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ClusterTrustBundleProjection"):
		return &applyconfigurationcorev1.ClusterTrustBundleProjectionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ComponentCondition"):
		return &applyconfigurationcorev1.ComponentConditionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ComponentStatus"):
		return &applyconfigurationcorev1.ComponentStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ConfigMap"):
		return &applyconfigurationcorev1.ConfigMapApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ConfigMapEnvSource"):
		return &applyconfigurationcorev1.ConfigMapEnvSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ConfigMapKeySelector"):
		return &applyconfigurationcorev1.ConfigMapKeySelectorApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ConfigMapNodeConfigSource"):
		return &applyconfigurationcorev1.ConfigMapNodeConfigSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ConfigMapProjection"):
		return &applyconfigurationcorev1.ConfigMapProjectionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ConfigMapVolumeSource"):
		return &applyconfigurationcorev1.ConfigMapVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Container"):
		return &applyconfigurationcorev1.ContainerApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ContainerImage"):
		return &applyconfigurationcorev1.ContainerImageApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ContainerPort"):
		return &applyconfigurationcorev1.ContainerPortApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ContainerResizePolicy"):
		return &applyconfigurationcorev1.ContainerResizePolicyApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ContainerState"):
		return &applyconfigurationcorev1.ContainerStateApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ContainerStateRunning"):
		return &applyconfigurationcorev1.ContainerStateRunningApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ContainerStateTerminated"):
		return &applyconfigurationcorev1.ContainerStateTerminatedApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ContainerStateWaiting"):
		return &applyconfigurationcorev1.ContainerStateWaitingApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ContainerStatus"):
		return &applyconfigurationcorev1.ContainerStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("CSIPersistentVolumeSource"):
		return &applyconfigurationcorev1.CSIPersistentVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("CSIVolumeSource"):
		return &applyconfigurationcorev1.CSIVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("DaemonEndpoint"):
		return &applyconfigurationcorev1.DaemonEndpointApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("DownwardAPIProjection"):
		return &applyconfigurationcorev1.DownwardAPIProjectionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("DownwardAPIVolumeFile"):
		return &applyconfigurationcorev1.DownwardAPIVolumeFileApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("DownwardAPIVolumeSource"):
		return &applyconfigurationcorev1.DownwardAPIVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("EmptyDirVolumeSource"):
		return &applyconfigurationcorev1.EmptyDirVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("EndpointAddress"):
		return &applyconfigurationcorev1.EndpointAddressApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("EndpointPort"):
		return &applyconfigurationcorev1.EndpointPortApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Endpoints"):
		return &applyconfigurationcorev1.EndpointsApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("EndpointSubset"):
		return &applyconfigurationcorev1.EndpointSubsetApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("EnvFromSource"):
		return &applyconfigurationcorev1.EnvFromSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("EnvVar"):
		return &applyconfigurationcorev1.EnvVarApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("EnvVarSource"):
		return &applyconfigurationcorev1.EnvVarSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("EphemeralContainer"):
		return &applyconfigurationcorev1.EphemeralContainerApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("EphemeralContainerCommon"):
		return &applyconfigurationcorev1.EphemeralContainerCommonApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("EphemeralVolumeSource"):
		return &applyconfigurationcorev1.EphemeralVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Event"):
		return &applyconfigurationcorev1.EventApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("EventSeries"):
		return &applyconfigurationcorev1.EventSeriesApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("EventSource"):
		return &applyconfigurationcorev1.EventSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ExecAction"):
		return &applyconfigurationcorev1.ExecActionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("FCVolumeSource"):
		return &applyconfigurationcorev1.FCVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("FlexPersistentVolumeSource"):
		return &applyconfigurationcorev1.FlexPersistentVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("FlexVolumeSource"):
		return &applyconfigurationcorev1.FlexVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("FlockerVolumeSource"):
		return &applyconfigurationcorev1.FlockerVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("GCEPersistentDiskVolumeSource"):
		return &applyconfigurationcorev1.GCEPersistentDiskVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("GitRepoVolumeSource"):
		return &applyconfigurationcorev1.GitRepoVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("GlusterfsPersistentVolumeSource"):
		return &applyconfigurationcorev1.GlusterfsPersistentVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("GlusterfsVolumeSource"):
		return &applyconfigurationcorev1.GlusterfsVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("GRPCAction"):
		return &applyconfigurationcorev1.GRPCActionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("HostAlias"):
		return &applyconfigurationcorev1.HostAliasApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("HostIP"):
		return &applyconfigurationcorev1.HostIPApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("HostPathVolumeSource"):
		return &applyconfigurationcorev1.HostPathVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("HTTPGetAction"):
		return &applyconfigurationcorev1.HTTPGetActionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("HTTPHeader"):
		return &applyconfigurationcorev1.HTTPHeaderApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ISCSIPersistentVolumeSource"):
		return &applyconfigurationcorev1.ISCSIPersistentVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ISCSIVolumeSource"):
		return &applyconfigurationcorev1.ISCSIVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("KeyToPath"):
		return &applyconfigurationcorev1.KeyToPathApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Lifecycle"):
		return &applyconfigurationcorev1.LifecycleApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("LifecycleHandler"):
		return &applyconfigurationcorev1.LifecycleHandlerApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("LimitRange"):
		return &applyconfigurationcorev1.LimitRangeApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("LimitRangeItem"):
		return &applyconfigurationcorev1.LimitRangeItemApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("LimitRangeSpec"):
		return &applyconfigurationcorev1.LimitRangeSpecApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("LoadBalancerIngress"):
		return &applyconfigurationcorev1.LoadBalancerIngressApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("LoadBalancerStatus"):
		return &applyconfigurationcorev1.LoadBalancerStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("LocalObjectReference"):
		return &applyconfigurationcorev1.LocalObjectReferenceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("LocalVolumeSource"):
		return &applyconfigurationcorev1.LocalVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ModifyVolumeStatus"):
		return &applyconfigurationcorev1.ModifyVolumeStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Namespace"):
		return &applyconfigurationcorev1.NamespaceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NamespaceCondition"):
		return &applyconfigurationcorev1.NamespaceConditionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NamespaceSpec"):
		return &applyconfigurationcorev1.NamespaceSpecApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NamespaceStatus"):
		return &applyconfigurationcorev1.NamespaceStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NFSVolumeSource"):
		return &applyconfigurationcorev1.NFSVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Node"):
		return &applyconfigurationcorev1.NodeApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NodeAddress"):
		return &applyconfigurationcorev1.NodeAddressApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NodeAffinity"):
		return &applyconfigurationcorev1.NodeAffinityApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NodeCondition"):
		return &applyconfigurationcorev1.NodeConditionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NodeConfigSource"):
		return &applyconfigurationcorev1.NodeConfigSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NodeConfigStatus"):
		return &applyconfigurationcorev1.NodeConfigStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NodeDaemonEndpoints"):
		return &applyconfigurationcorev1.NodeDaemonEndpointsApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NodeSelector"):
		return &applyconfigurationcorev1.NodeSelectorApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NodeSelectorRequirement"):
		return &applyconfigurationcorev1.NodeSelectorRequirementApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NodeSelectorTerm"):
		return &applyconfigurationcorev1.NodeSelectorTermApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NodeSpec"):
		return &applyconfigurationcorev1.NodeSpecApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NodeStatus"):
		return &applyconfigurationcorev1.NodeStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("NodeSystemInfo"):
		return &applyconfigurationcorev1.NodeSystemInfoApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ObjectFieldSelector"):
		return &applyconfigurationcorev1.ObjectFieldSelectorApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ObjectReference"):
		return &applyconfigurationcorev1.ObjectReferenceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PersistentVolume"):
		return &applyconfigurationcorev1.PersistentVolumeApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PersistentVolumeClaim"):
		return &applyconfigurationcorev1.PersistentVolumeClaimApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PersistentVolumeClaimCondition"):
		return &applyconfigurationcorev1.PersistentVolumeClaimConditionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PersistentVolumeClaimSpec"):
		return &applyconfigurationcorev1.PersistentVolumeClaimSpecApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PersistentVolumeClaimStatus"):
		return &applyconfigurationcorev1.PersistentVolumeClaimStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PersistentVolumeClaimTemplate"):
		return &applyconfigurationcorev1.PersistentVolumeClaimTemplateApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PersistentVolumeClaimVolumeSource"):
		return &applyconfigurationcorev1.PersistentVolumeClaimVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PersistentVolumeSource"):
		return &applyconfigurationcorev1.PersistentVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PersistentVolumeSpec"):
		return &applyconfigurationcorev1.PersistentVolumeSpecApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PersistentVolumeStatus"):
		return &applyconfigurationcorev1.PersistentVolumeStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PhotonPersistentDiskVolumeSource"):
		return &applyconfigurationcorev1.PhotonPersistentDiskVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Pod"):
		return &applyconfigurationcorev1.PodApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodAffinity"):
		return &applyconfigurationcorev1.PodAffinityApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodAffinityTerm"):
		return &applyconfigurationcorev1.PodAffinityTermApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodAntiAffinity"):
		return &applyconfigurationcorev1.PodAntiAffinityApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodCondition"):
		return &applyconfigurationcorev1.PodConditionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodDNSConfig"):
		return &applyconfigurationcorev1.PodDNSConfigApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodDNSConfigOption"):
		return &applyconfigurationcorev1.PodDNSConfigOptionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodIP"):
		return &applyconfigurationcorev1.PodIPApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodOS"):
		return &applyconfigurationcorev1.PodOSApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodReadinessGate"):
		return &applyconfigurationcorev1.PodReadinessGateApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodResourceClaim"):
		return &applyconfigurationcorev1.PodResourceClaimApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodResourceClaimStatus"):
		return &applyconfigurationcorev1.PodResourceClaimStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodSchedulingGate"):
		return &applyconfigurationcorev1.PodSchedulingGateApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodSecurityContext"):
		return &applyconfigurationcorev1.PodSecurityContextApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodSpec"):
		return &applyconfigurationcorev1.PodSpecApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodStatus"):
		return &applyconfigurationcorev1.PodStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodTemplate"):
		return &applyconfigurationcorev1.PodTemplateApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PodTemplateSpec"):
		return &applyconfigurationcorev1.PodTemplateSpecApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PortStatus"):
		return &applyconfigurationcorev1.PortStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PortworxVolumeSource"):
		return &applyconfigurationcorev1.PortworxVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("PreferredSchedulingTerm"):
		return &applyconfigurationcorev1.PreferredSchedulingTermApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Probe"):
		return &applyconfigurationcorev1.ProbeApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ProbeHandler"):
		return &applyconfigurationcorev1.ProbeHandlerApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ProjectedVolumeSource"):
		return &applyconfigurationcorev1.ProjectedVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("QuobyteVolumeSource"):
		return &applyconfigurationcorev1.QuobyteVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("RBDPersistentVolumeSource"):
		return &applyconfigurationcorev1.RBDPersistentVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("RBDVolumeSource"):
		return &applyconfigurationcorev1.RBDVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ReplicationController"):
		return &applyconfigurationcorev1.ReplicationControllerApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ReplicationControllerCondition"):
		return &applyconfigurationcorev1.ReplicationControllerConditionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ReplicationControllerSpec"):
		return &applyconfigurationcorev1.ReplicationControllerSpecApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ReplicationControllerStatus"):
		return &applyconfigurationcorev1.ReplicationControllerStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ResourceClaim"):
		return &applyconfigurationcorev1.ResourceClaimApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ResourceFieldSelector"):
		return &applyconfigurationcorev1.ResourceFieldSelectorApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ResourceQuota"):
		return &applyconfigurationcorev1.ResourceQuotaApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ResourceQuotaSpec"):
		return &applyconfigurationcorev1.ResourceQuotaSpecApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ResourceQuotaStatus"):
		return &applyconfigurationcorev1.ResourceQuotaStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ResourceRequirements"):
		return &applyconfigurationcorev1.ResourceRequirementsApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ScaleIOPersistentVolumeSource"):
		return &applyconfigurationcorev1.ScaleIOPersistentVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ScaleIOVolumeSource"):
		return &applyconfigurationcorev1.ScaleIOVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ScopedResourceSelectorRequirement"):
		return &applyconfigurationcorev1.ScopedResourceSelectorRequirementApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ScopeSelector"):
		return &applyconfigurationcorev1.ScopeSelectorApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("SeccompProfile"):
		return &applyconfigurationcorev1.SeccompProfileApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Secret"):
		return &applyconfigurationcorev1.SecretApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("SecretEnvSource"):
		return &applyconfigurationcorev1.SecretEnvSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("SecretKeySelector"):
		return &applyconfigurationcorev1.SecretKeySelectorApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("SecretProjection"):
		return &applyconfigurationcorev1.SecretProjectionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("SecretReference"):
		return &applyconfigurationcorev1.SecretReferenceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("SecretVolumeSource"):
		return &applyconfigurationcorev1.SecretVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("SecurityContext"):
		return &applyconfigurationcorev1.SecurityContextApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("SELinuxOptions"):
		return &applyconfigurationcorev1.SELinuxOptionsApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Service"):
		return &applyconfigurationcorev1.ServiceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ServiceAccount"):
		return &applyconfigurationcorev1.ServiceAccountApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ServiceAccountTokenProjection"):
		return &applyconfigurationcorev1.ServiceAccountTokenProjectionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ServicePort"):
		return &applyconfigurationcorev1.ServicePortApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ServiceSpec"):
		return &applyconfigurationcorev1.ServiceSpecApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("ServiceStatus"):
		return &applyconfigurationcorev1.ServiceStatusApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("SessionAffinityConfig"):
		return &applyconfigurationcorev1.SessionAffinityConfigApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("SleepAction"):
		return &applyconfigurationcorev1.SleepActionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("StorageOSPersistentVolumeSource"):
		return &applyconfigurationcorev1.StorageOSPersistentVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("StorageOSVolumeSource"):
		return &applyconfigurationcorev1.StorageOSVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Sysctl"):
		return &applyconfigurationcorev1.SysctlApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Taint"):
		return &applyconfigurationcorev1.TaintApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("TCPSocketAction"):
		return &applyconfigurationcorev1.TCPSocketActionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Toleration"):
		return &applyconfigurationcorev1.TolerationApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("TopologySelectorLabelRequirement"):
		return &applyconfigurationcorev1.TopologySelectorLabelRequirementApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("TopologySelectorTerm"):
		return &applyconfigurationcorev1.TopologySelectorTermApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("TopologySpreadConstraint"):
		return &applyconfigurationcorev1.TopologySpreadConstraintApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("TypedLocalObjectReference"):
		return &applyconfigurationcorev1.TypedLocalObjectReferenceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("TypedObjectReference"):
		return &applyconfigurationcorev1.TypedObjectReferenceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("Volume"):
		return &applyconfigurationcorev1.VolumeApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("VolumeDevice"):
		return &applyconfigurationcorev1.VolumeDeviceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("VolumeMount"):
		return &applyconfigurationcorev1.VolumeMountApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("VolumeNodeAffinity"):
		return &applyconfigurationcorev1.VolumeNodeAffinityApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("VolumeProjection"):
		return &applyconfigurationcorev1.VolumeProjectionApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("VolumeResourceRequirements"):
		return &applyconfigurationcorev1.VolumeResourceRequirementsApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("VolumeSource"):
		return &applyconfigurationcorev1.VolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("VsphereVirtualDiskVolumeSource"):
		return &applyconfigurationcorev1.VsphereVirtualDiskVolumeSourceApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("WeightedPodAffinityTerm"):
		return &applyconfigurationcorev1.WeightedPodAffinityTermApplyConfiguration{}
	case corev1.SchemeGroupVersion.WithKind("WindowsSecurityContextOptions"):
		return &applyconfigurationcorev1.WindowsSecurityContextOptionsApplyConfiguration{}

		// Group=discovery.k8s.io, Version=v1
	case discoveryv1.SchemeGroupVersion.WithKind("Endpoint"):
		return &applyconfigurationdiscoveryv1.EndpointApplyConfiguration{}
	case discoveryv1.SchemeGroupVersion.WithKind("EndpointConditions"):
		return &applyconfigurationdiscoveryv1.EndpointConditionsApplyConfiguration{}
	case discoveryv1.SchemeGroupVersion.WithKind("EndpointHints"):
		return &applyconfigurationdiscoveryv1.EndpointHintsApplyConfiguration{}
	case discoveryv1.SchemeGroupVersion.WithKind("EndpointPort"):
		return &applyconfigurationdiscoveryv1.EndpointPortApplyConfiguration{}
	case discoveryv1.SchemeGroupVersion.WithKind("EndpointSlice"):
		return &applyconfigurationdiscoveryv1.EndpointSliceApplyConfiguration{}
	case discoveryv1.SchemeGroupVersion.WithKind("ForZone"):
		return &applyconfigurationdiscoveryv1.ForZoneApplyConfiguration{}

		// Group=events.k8s.io, Version=v1
	case eventsv1.SchemeGroupVersion.WithKind("Event"):
		return &applyconfigurationeventsv1.EventApplyConfiguration{}
	case eventsv1.SchemeGroupVersion.WithKind("EventSeries"):
		return &applyconfigurationeventsv1.EventSeriesApplyConfiguration{}

		// Group=rbac.authorization.k8s.io, Version=v1
	case rbacv1.SchemeGroupVersion.WithKind("AggregationRule"):
		return &applyconfigurationrbacv1.AggregationRuleApplyConfiguration{}
	case rbacv1.SchemeGroupVersion.WithKind("ClusterRole"):
		return &applyconfigurationrbacv1.ClusterRoleApplyConfiguration{}
	case rbacv1.SchemeGroupVersion.WithKind("ClusterRoleBinding"):
		return &applyconfigurationrbacv1.ClusterRoleBindingApplyConfiguration{}
	case rbacv1.SchemeGroupVersion.WithKind("PolicyRule"):
		return &applyconfigurationrbacv1.PolicyRuleApplyConfiguration{}
	case rbacv1.SchemeGroupVersion.WithKind("Role"):
		return &applyconfigurationrbacv1.RoleApplyConfiguration{}
	case rbacv1.SchemeGroupVersion.WithKind("RoleBinding"):
		return &applyconfigurationrbacv1.RoleBindingApplyConfiguration{}
	case rbacv1.SchemeGroupVersion.WithKind("RoleRef"):
		return &applyconfigurationrbacv1.RoleRefApplyConfiguration{}
	case rbacv1.SchemeGroupVersion.WithKind("Subject"):
		return &applyconfigurationrbacv1.SubjectApplyConfiguration{}

		// Group=scheduling.k8s.io, Version=v1
	case schedulingv1.SchemeGroupVersion.WithKind("PriorityClass"):
		return &applyconfigurationschedulingv1.PriorityClassApplyConfiguration{}

		// Group=storage.k8s.io, Version=v1
	case storagev1.SchemeGroupVersion.WithKind("CSIDriver"):
		return &applyconfigurationstoragev1.CSIDriverApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("CSIDriverSpec"):
		return &applyconfigurationstoragev1.CSIDriverSpecApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("CSINode"):
		return &applyconfigurationstoragev1.CSINodeApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("CSINodeDriver"):
		return &applyconfigurationstoragev1.CSINodeDriverApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("CSINodeSpec"):
		return &applyconfigurationstoragev1.CSINodeSpecApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("CSIStorageCapacity"):
		return &applyconfigurationstoragev1.CSIStorageCapacityApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("StorageClass"):
		return &applyconfigurationstoragev1.StorageClassApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("TokenRequest"):
		return &applyconfigurationstoragev1.TokenRequestApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("VolumeAttachment"):
		return &applyconfigurationstoragev1.VolumeAttachmentApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("VolumeAttachmentSource"):
		return &applyconfigurationstoragev1.VolumeAttachmentSourceApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("VolumeAttachmentSpec"):
		return &applyconfigurationstoragev1.VolumeAttachmentSpecApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("VolumeAttachmentStatus"):
		return &applyconfigurationstoragev1.VolumeAttachmentStatusApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("VolumeError"):
		return &applyconfigurationstoragev1.VolumeErrorApplyConfiguration{}
	case storagev1.SchemeGroupVersion.WithKind("VolumeNodeResources"):
		return &applyconfigurationstoragev1.VolumeNodeResourcesApplyConfiguration{}

		// Group=walrus.seal.io, Version=v1
	case walrusv1.SchemeGroupVersion.WithKind("Catalog"):
		return &applyconfigurationwalrusv1.CatalogApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("Connector"):
		return &applyconfigurationwalrusv1.ConnectorApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("Environment"):
		return &applyconfigurationwalrusv1.EnvironmentApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("EnvironmentSpec"):
		return &applyconfigurationwalrusv1.EnvironmentSpecApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("EnvironmentStatus"):
		return &applyconfigurationwalrusv1.EnvironmentStatusApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("Project"):
		return &applyconfigurationwalrusv1.ProjectApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("ProjectSpec"):
		return &applyconfigurationwalrusv1.ProjectSpecApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("ProjectStatus"):
		return &applyconfigurationwalrusv1.ProjectStatusApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("Resource"):
		return &applyconfigurationwalrusv1.ResourceApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("ResourceDefinition"):
		return &applyconfigurationwalrusv1.ResourceDefinitionApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("ResourceRun"):
		return &applyconfigurationwalrusv1.ResourceRunApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("Setting"):
		return &applyconfigurationwalrusv1.SettingApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SettingSpec"):
		return &applyconfigurationwalrusv1.SettingSpecApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SettingStatus"):
		return &applyconfigurationwalrusv1.SettingStatusApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("Subject"):
		return &applyconfigurationwalrusv1.SubjectApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProvider"):
		return &applyconfigurationwalrusv1.SubjectProviderApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderBitbucketConfig"):
		return &applyconfigurationwalrusv1.SubjectProviderBitbucketConfigApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderExternalConfig"):
		return &applyconfigurationwalrusv1.SubjectProviderExternalConfigApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderGiteaConfig"):
		return &applyconfigurationwalrusv1.SubjectProviderGiteaConfigApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderGitHubConfig"):
		return &applyconfigurationwalrusv1.SubjectProviderGitHubConfigApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderGitLabConfig"):
		return &applyconfigurationwalrusv1.SubjectProviderGitLabConfigApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderGoogleConfig"):
		return &applyconfigurationwalrusv1.SubjectProviderGoogleConfigApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderLDAPConfig"):
		return &applyconfigurationwalrusv1.SubjectProviderLDAPConfigApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderLDAPGroupSearch"):
		return &applyconfigurationwalrusv1.SubjectProviderLdapGroupSearchApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderLdapGroupSearchUserMatcher"):
		return &applyconfigurationwalrusv1.SubjectProviderLdapGroupSearchUserMatcherApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderLDAPUserSearch"):
		return &applyconfigurationwalrusv1.SubjectProviderLdapUserSearchApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderMicrosoftConfig"):
		return &applyconfigurationwalrusv1.SubjectProviderMicrosoftConfigApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderOAuthClaimMapping"):
		return &applyconfigurationwalrusv1.SubjectProviderOAuthClaimMappingApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderOAuthConfig"):
		return &applyconfigurationwalrusv1.SubjectProviderOAuthConfigApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderOIDCConfig"):
		return &applyconfigurationwalrusv1.SubjectProviderOIDCConfigApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderSpec"):
		return &applyconfigurationwalrusv1.SubjectProviderSpecApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectProviderStatus"):
		return &applyconfigurationwalrusv1.SubjectProviderStatusApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("SubjectSpec"):
		return &applyconfigurationwalrusv1.SubjectSpecApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("Template"):
		return &applyconfigurationwalrusv1.TemplateApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("Variable"):
		return &applyconfigurationwalrusv1.VariableApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("VariableSpec"):
		return &applyconfigurationwalrusv1.VariableSpecApplyConfiguration{}
	case walrusv1.SchemeGroupVersion.WithKind("VariableStatus"):
		return &applyconfigurationwalrusv1.VariableStatusApplyConfiguration{}

		// Group=walruscore.seal.io, Version=v1
	case walruscorev1.SchemeGroupVersion.WithKind("Catalog"):
		return &applyconfigurationwalruscorev1.CatalogApplyConfiguration{}
	case walruscorev1.SchemeGroupVersion.WithKind("Connector"):
		return &applyconfigurationwalruscorev1.ConnectorApplyConfiguration{}
	case walruscorev1.SchemeGroupVersion.WithKind("Resource"):
		return &applyconfigurationwalruscorev1.ResourceApplyConfiguration{}
	case walruscorev1.SchemeGroupVersion.WithKind("ResourceDefinition"):
		return &applyconfigurationwalruscorev1.ResourceDefinitionApplyConfiguration{}
	case walruscorev1.SchemeGroupVersion.WithKind("ResourceRun"):
		return &applyconfigurationwalruscorev1.ResourceRunApplyConfiguration{}
	case walruscorev1.SchemeGroupVersion.WithKind("Template"):
		return &applyconfigurationwalruscorev1.TemplateApplyConfiguration{}

	}
	return nil
}
