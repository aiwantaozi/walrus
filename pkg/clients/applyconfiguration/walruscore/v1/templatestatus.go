// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TemplateStatusApplyConfiguration represents an declarative configuration of the TemplateStatus type for use
// with apply.
type TemplateStatusApplyConfiguration struct {
	StatusDescriptorApplyConfiguration `json:",inline"`
	Project                            *string                             `json:"project,omitempty"`
	URL                                *string                             `json:"url,omitempty"`
	Icon                               *string                             `json:"icon,omitempty"`
	Versions                           []TemplateVersionApplyConfiguration `json:"versions,omitempty"`
	LastSuccessfulSyncTime             *metav1.Time                        `json:"lastSuccessfulSyncTime,omitempty"`
}

// TemplateStatusApplyConfiguration constructs an declarative configuration of the TemplateStatus type for use with
// apply.
func TemplateStatus() *TemplateStatusApplyConfiguration {
	return &TemplateStatusApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *TemplateStatusApplyConfiguration) WithPhase(value string) *TemplateStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithPhaseMessage sets the PhaseMessage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PhaseMessage field is set to the value of the last call.
func (b *TemplateStatusApplyConfiguration) WithPhaseMessage(value string) *TemplateStatusApplyConfiguration {
	b.PhaseMessage = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *TemplateStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *TemplateStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithProject sets the Project field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Project field is set to the value of the last call.
func (b *TemplateStatusApplyConfiguration) WithProject(value string) *TemplateStatusApplyConfiguration {
	b.Project = &value
	return b
}

// WithURL sets the URL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the URL field is set to the value of the last call.
func (b *TemplateStatusApplyConfiguration) WithURL(value string) *TemplateStatusApplyConfiguration {
	b.URL = &value
	return b
}

// WithIcon sets the Icon field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Icon field is set to the value of the last call.
func (b *TemplateStatusApplyConfiguration) WithIcon(value string) *TemplateStatusApplyConfiguration {
	b.Icon = &value
	return b
}

// WithVersions adds the given value to the Versions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Versions field.
func (b *TemplateStatusApplyConfiguration) WithVersions(values ...*TemplateVersionApplyConfiguration) *TemplateStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVersions")
		}
		b.Versions = append(b.Versions, *values[i])
	}
	return b
}

// WithLastSuccessfulSyncTime sets the LastSuccessfulSyncTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastSuccessfulSyncTime field is set to the value of the last call.
func (b *TemplateStatusApplyConfiguration) WithLastSuccessfulSyncTime(value metav1.Time) *TemplateStatusApplyConfiguration {
	b.LastSuccessfulSyncTime = &value
	return b
}
