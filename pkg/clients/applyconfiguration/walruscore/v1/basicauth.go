// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

// BasicAuthApplyConfiguration represents an declarative configuration of the BasicAuth type for use
// with apply.
type BasicAuthApplyConfiguration struct {
	Username  *string                                 `json:"username,omitempty"`
	Password  *string                                 `json:"password,omitempty"`
	SecretRef *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
}

// BasicAuthApplyConfiguration constructs an declarative configuration of the BasicAuth type for use with
// apply.
func BasicAuth() *BasicAuthApplyConfiguration {
	return &BasicAuthApplyConfiguration{}
}

// WithUsername sets the Username field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Username field is set to the value of the last call.
func (b *BasicAuthApplyConfiguration) WithUsername(value string) *BasicAuthApplyConfiguration {
	b.Username = &value
	return b
}

// WithPassword sets the Password field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Password field is set to the value of the last call.
func (b *BasicAuthApplyConfiguration) WithPassword(value string) *BasicAuthApplyConfiguration {
	b.Password = &value
	return b
}

// WithSecretRef sets the SecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretRef field is set to the value of the last call.
func (b *BasicAuthApplyConfiguration) WithSecretRef(value *LocalObjectReferenceApplyConfiguration) *BasicAuthApplyConfiguration {
	b.SecretRef = value
	return b
}
