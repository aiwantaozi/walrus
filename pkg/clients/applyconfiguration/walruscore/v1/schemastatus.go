// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SchemaStatusApplyConfiguration represents an declarative configuration of the SchemaStatus type for use
// with apply.
type SchemaStatusApplyConfiguration struct {
	Value      *runtime.RawExtension         `json:"value,omitempty"`
	Project    *string                       `json:"project,omitempty"`
	Conditions []ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// SchemaStatusApplyConfiguration constructs an declarative configuration of the SchemaStatus type for use with
// apply.
func SchemaStatus() *SchemaStatusApplyConfiguration {
	return &SchemaStatusApplyConfiguration{}
}

// WithValue sets the Value field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Value field is set to the value of the last call.
func (b *SchemaStatusApplyConfiguration) WithValue(value runtime.RawExtension) *SchemaStatusApplyConfiguration {
	b.Value = &value
	return b
}

// WithProject sets the Project field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Project field is set to the value of the last call.
func (b *SchemaStatusApplyConfiguration) WithProject(value string) *SchemaStatusApplyConfiguration {
	b.Project = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *SchemaStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *SchemaStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
