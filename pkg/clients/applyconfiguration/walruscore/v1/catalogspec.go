// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

// CatalogSpecApplyConfiguration represents an declarative configuration of the CatalogSpec type for use
// with apply.
type CatalogSpecApplyConfiguration struct {
	TemplateFormat       *string                                 `json:"templateFormat,omitempty"`
	Description          *string                                 `json:"description,omitempty"`
	Filtering            *FilteringApplyConfiguration            `json:"filtering,omitempty"`
	VCSSource            *VCSSourceApplyConfiguration            `json:"vcsSource,omitempty"`
	HelmRepositorySource *HelmRepositorySourceApplyConfiguration `json:"helmRepositorySource,omitempty"`
	OCIRegistrySource    *OCIRegistrySourceApplyConfiguration    `json:"ociRegistrySource,omitempty"`
}

// CatalogSpecApplyConfiguration constructs an declarative configuration of the CatalogSpec type for use with
// apply.
func CatalogSpec() *CatalogSpecApplyConfiguration {
	return &CatalogSpecApplyConfiguration{}
}

// WithTemplateFormat sets the TemplateFormat field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TemplateFormat field is set to the value of the last call.
func (b *CatalogSpecApplyConfiguration) WithTemplateFormat(value string) *CatalogSpecApplyConfiguration {
	b.TemplateFormat = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *CatalogSpecApplyConfiguration) WithDescription(value string) *CatalogSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithFiltering sets the Filtering field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Filtering field is set to the value of the last call.
func (b *CatalogSpecApplyConfiguration) WithFiltering(value *FilteringApplyConfiguration) *CatalogSpecApplyConfiguration {
	b.Filtering = value
	return b
}

// WithVCSSource sets the VCSSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VCSSource field is set to the value of the last call.
func (b *CatalogSpecApplyConfiguration) WithVCSSource(value *VCSSourceApplyConfiguration) *CatalogSpecApplyConfiguration {
	b.VCSSource = value
	return b
}

// WithHelmRepositorySource sets the HelmRepositorySource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HelmRepositorySource field is set to the value of the last call.
func (b *CatalogSpecApplyConfiguration) WithHelmRepositorySource(value *HelmRepositorySourceApplyConfiguration) *CatalogSpecApplyConfiguration {
	b.HelmRepositorySource = value
	return b
}

// WithOCIRegistrySource sets the OCIRegistrySource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OCIRegistrySource field is set to the value of the last call.
func (b *CatalogSpecApplyConfiguration) WithOCIRegistrySource(value *OCIRegistrySourceApplyConfiguration) *CatalogSpecApplyConfiguration {
	b.OCIRegistrySource = value
	return b
}
