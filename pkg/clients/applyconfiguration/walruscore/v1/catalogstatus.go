// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CatalogStatusApplyConfiguration represents an declarative configuration of the CatalogStatus type for use
// with apply.
type CatalogStatusApplyConfiguration struct {
	StatusDescriptorApplyConfiguration `json:",inline"`
	LastSyncTime                       *metav1.Time `json:"lastSyncTime,omitempty"`
	TemplateCount                      *int64       `json:"templateCount,omitempty"`
	URL                                *string      `json:"url,omitempty"`
	Project                            *string      `json:"project,omitempty"`
}

// CatalogStatusApplyConfiguration constructs an declarative configuration of the CatalogStatus type for use with
// apply.
func CatalogStatus() *CatalogStatusApplyConfiguration {
	return &CatalogStatusApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *CatalogStatusApplyConfiguration) WithPhase(value string) *CatalogStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithPhaseMessage sets the PhaseMessage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PhaseMessage field is set to the value of the last call.
func (b *CatalogStatusApplyConfiguration) WithPhaseMessage(value string) *CatalogStatusApplyConfiguration {
	b.PhaseMessage = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *CatalogStatusApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *CatalogStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithLastSyncTime sets the LastSyncTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastSyncTime field is set to the value of the last call.
func (b *CatalogStatusApplyConfiguration) WithLastSyncTime(value metav1.Time) *CatalogStatusApplyConfiguration {
	b.LastSyncTime = &value
	return b
}

// WithTemplateCount sets the TemplateCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TemplateCount field is set to the value of the last call.
func (b *CatalogStatusApplyConfiguration) WithTemplateCount(value int64) *CatalogStatusApplyConfiguration {
	b.TemplateCount = &value
	return b
}

// WithURL sets the URL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the URL field is set to the value of the last call.
func (b *CatalogStatusApplyConfiguration) WithURL(value string) *CatalogStatusApplyConfiguration {
	b.URL = &value
	return b
}

// WithProject sets the Project field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Project field is set to the value of the last call.
func (b *CatalogStatusApplyConfiguration) WithProject(value string) *CatalogStatusApplyConfiguration {
	b.Project = &value
	return b
}
