// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

// StatusDescriptorApplyConfiguration represents an declarative configuration of the StatusDescriptor type for use
// with apply.
type StatusDescriptorApplyConfiguration struct {
	ConditionSummaryApplyConfiguration `json:",inline"`
	Conditions                         []ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// StatusDescriptorApplyConfiguration constructs an declarative configuration of the StatusDescriptor type for use with
// apply.
func StatusDescriptor() *StatusDescriptorApplyConfiguration {
	return &StatusDescriptorApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *StatusDescriptorApplyConfiguration) WithPhase(value string) *StatusDescriptorApplyConfiguration {
	b.Phase = &value
	return b
}

// WithPhaseMessage sets the PhaseMessage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PhaseMessage field is set to the value of the last call.
func (b *StatusDescriptorApplyConfiguration) WithPhaseMessage(value string) *StatusDescriptorApplyConfiguration {
	b.PhaseMessage = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *StatusDescriptorApplyConfiguration) WithConditions(values ...*ConditionApplyConfiguration) *StatusDescriptorApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
