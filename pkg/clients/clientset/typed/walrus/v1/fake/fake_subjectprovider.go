// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
	walrusv1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/walrus/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSubjectProviders implements SubjectProviderInterface
type FakeSubjectProviders struct {
	Fake *FakeWalrusV1
	ns   string
}

var subjectprovidersResource = v1.SchemeGroupVersion.WithResource("subjectproviders")

var subjectprovidersKind = v1.SchemeGroupVersion.WithKind("SubjectProvider")

// Get takes name of the subjectProvider, and returns the corresponding subjectProvider object, and an error if there is any.
func (c *FakeSubjectProviders) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.SubjectProvider, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(subjectprovidersResource, c.ns, name), &v1.SubjectProvider{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.SubjectProvider), err
}

// List takes label and field selectors, and returns the list of SubjectProviders that match those selectors.
func (c *FakeSubjectProviders) List(ctx context.Context, opts metav1.ListOptions) (result *v1.SubjectProviderList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(subjectprovidersResource, subjectprovidersKind, c.ns, opts), &v1.SubjectProviderList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.SubjectProviderList{ListMeta: obj.(*v1.SubjectProviderList).ListMeta}
	for _, item := range obj.(*v1.SubjectProviderList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested subjectProviders.
func (c *FakeSubjectProviders) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(subjectprovidersResource, c.ns, opts))

}

// Create takes the representation of a subjectProvider and creates it.  Returns the server's representation of the subjectProvider, and an error, if there is any.
func (c *FakeSubjectProviders) Create(ctx context.Context, subjectProvider *v1.SubjectProvider, opts metav1.CreateOptions) (result *v1.SubjectProvider, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(subjectprovidersResource, c.ns, subjectProvider), &v1.SubjectProvider{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.SubjectProvider), err
}

// Update takes the representation of a subjectProvider and updates it. Returns the server's representation of the subjectProvider, and an error, if there is any.
func (c *FakeSubjectProviders) Update(ctx context.Context, subjectProvider *v1.SubjectProvider, opts metav1.UpdateOptions) (result *v1.SubjectProvider, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(subjectprovidersResource, c.ns, subjectProvider), &v1.SubjectProvider{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.SubjectProvider), err
}

// Delete takes name of the subjectProvider and deletes it. Returns an error if one occurs.
func (c *FakeSubjectProviders) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(subjectprovidersResource, c.ns, name, opts), &v1.SubjectProvider{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSubjectProviders) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(subjectprovidersResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1.SubjectProviderList{})
	return err
}

// Patch applies the patch and returns the patched subjectProvider.
func (c *FakeSubjectProviders) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.SubjectProvider, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(subjectprovidersResource, c.ns, name, pt, data, subresources...), &v1.SubjectProvider{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.SubjectProvider), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied subjectProvider.
func (c *FakeSubjectProviders) Apply(ctx context.Context, subjectProvider *walrusv1.SubjectProviderApplyConfiguration, opts metav1.ApplyOptions) (result *v1.SubjectProvider, err error) {
	if subjectProvider == nil {
		return nil, fmt.Errorf("subjectProvider provided to Apply must not be nil")
	}
	data, err := json.Marshal(subjectProvider)
	if err != nil {
		return nil, err
	}
	name := subjectProvider.Name
	if name == nil {
		return nil, fmt.Errorf("subjectProvider.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(subjectprovidersResource, c.ns, *name, types.ApplyPatchType, data), &v1.SubjectProvider{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.SubjectProvider), err
}
