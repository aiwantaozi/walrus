// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	v1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubjectProviderLister helps list SubjectProviders.
// All objects returned here must be treated as read-only.
type SubjectProviderLister interface {
	// List lists all SubjectProviders in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SubjectProvider, err error)
	// SubjectProviders returns an object that can list and get SubjectProviders.
	SubjectProviders(namespace string) SubjectProviderNamespaceLister
	SubjectProviderListerExpansion
}

// subjectProviderLister implements the SubjectProviderLister interface.
type subjectProviderLister struct {
	indexer cache.Indexer
}

// NewSubjectProviderLister returns a new SubjectProviderLister.
func NewSubjectProviderLister(indexer cache.Indexer) SubjectProviderLister {
	return &subjectProviderLister{indexer: indexer}
}

// List lists all SubjectProviders in the indexer.
func (s *subjectProviderLister) List(selector labels.Selector) (ret []*v1.SubjectProvider, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SubjectProvider))
	})
	return ret, err
}

// SubjectProviders returns an object that can list and get SubjectProviders.
func (s *subjectProviderLister) SubjectProviders(namespace string) SubjectProviderNamespaceLister {
	return subjectProviderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubjectProviderNamespaceLister helps list and get SubjectProviders.
// All objects returned here must be treated as read-only.
type SubjectProviderNamespaceLister interface {
	// List lists all SubjectProviders in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SubjectProvider, err error)
	// Get retrieves the SubjectProvider from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SubjectProvider, error)
	SubjectProviderNamespaceListerExpansion
}

// subjectProviderNamespaceLister implements the SubjectProviderNamespaceLister
// interface.
type subjectProviderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubjectProviders in the indexer for a given namespace.
func (s subjectProviderNamespaceLister) List(selector labels.Selector) (ret []*v1.SubjectProvider, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SubjectProvider))
	})
	return ret, err
}

// Get retrieves the SubjectProvider from the indexer for a given namespace and name.
func (s subjectProviderNamespaceLister) Get(name string) (*v1.SubjectProvider, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.SchemeResource("subjectprovider"), name)
	}
	return obj.(*v1.SubjectProvider), nil
}
