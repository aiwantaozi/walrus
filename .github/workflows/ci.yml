name: CI

permissions:
  contents: read
  pull-requests: read
  actions: read

env:
  REPO: "sealio"
  VERSION: "${{ github.ref_name }}"
  BUILD_PLATFORMS: "linux/amd64,linux/arm64"
  PARALLELIZE: "false"
  GO_VERSION: "1.19.12"

defaults:
  run:
    shell: bash

on:
  push:
    branches:
      - "main"
      - "release/*"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "main"
      - "release/*"
  workflow_dispatch: {}

jobs:
  skip:
    timeout-minutes: 5
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      pull-requests: read
      actions: write
    outputs:
      should: ${{ steps.duplicate.outputs.should_skip }}
    steps:
      - name: Check Duplicate
        id: duplicate
        uses: fkirc/skip-duplicate-actions@v5
        with:
          github_token: "${{ github.token }}"
          paths_ignore: '["**.md", "**.mdx", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "push"]'
        continue-on-error: true

  build:
    needs:
      - skip
    if: needs.skip.outputs.should != 'true'
    timeout-minutes: 60
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # checkout the whole histories for commitsar,
          # currently commitsar needs full git objects to work correctly.
          fetch-depth: 0
          persist-credentials: false
      - name: Setup Go
        timeout-minutes: 15
        uses: actions/setup-go@v4
        with:
          go-version: "${{ env.GO_VERSION }}"
          cache-dependency-path: |
            **/go.sum
      - name: Setup Toolbox
        timeout-minutes: 5
        uses: actions/cache@v3
        with:
          # restore/save service binaries, e.g. goimports, golangci-lint, commitsar.
          key: toolbox-${{ runner.os }}
          path: |
            ${{ github.workspace }}/.sbin
      - name: Build
        run: make ci
        env:
          LINT_DIRTY: "true"
          PACKAGE_BUILD: "false"
          WALRUS_TELEMETRY_API_KEY: "${{ github.event_name != 'pull_request' && secrets.CI_TELEMETRY_API_KEY || '' }}"
      - name: Archive Publish Result
        uses: actions/cache/save@v3
        with:
          # save package resources, e.g. go build result, downloaded UI, entrypoint script.
          key: archive-${{ runner.os }}-${{ github.sha }}
          path: |
            ${{ github.workspace }}/.dist/package

  publish:
    needs:
      - build
      - skip
    if: needs.skip.outputs.should != 'true'
    permissions:
      contents: write
      actions: read
      id-token: write
    timeout-minutes: 20
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - target: walrus
            task: server
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:qemu-v7.0.0
          platforms: "arm64"
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login DockerHub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.CI_DOCKERHUB_USERNAME }}
          password: ${{ secrets.CI_DOCKERHUB_PASSWORD }}
      - name: Unarchive Publish Result
        timeout-minutes: 5
        uses: actions/cache/restore@v3
        with:
          # restore package resources, e.g. go build result, downloaded UI, entrypoint script.
          key: archive-${{ runner.os }}-${{ github.sha }}
          path: |
            ${{ github.workspace }}/.dist/package
      - name: Get Metadata
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REPO }}/${{ matrix.target }}
      - name: Rename Release Assets
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          cd .dist/package/${{ matrix.target }}/${{ matrix.task }}/build
          for file in cli*; do mv "$file" "$(echo "$file" | sed 's/^cli/walrus-cli/')"; done
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          fail_on_unmatched_files: true
          tag_name: ${{ steps.metadata.outputs.version }}
          files: |
            .dist/package/${{ matrix.target }}/${{ matrix.task }}/build/walrus-cli*
